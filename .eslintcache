[{"/Users/brinc/WebstormProjects/df-off-project/src/App.test.tsx":"1","/Users/brinc/WebstormProjects/df-off-project/src/App.tsx":"2","/Users/brinc/WebstormProjects/df-off-project/src/AxiosClient/axiosClient.ts":"3","/Users/brinc/WebstormProjects/df-off-project/src/apis/axiosClient.tsx":"4","/Users/brinc/WebstormProjects/df-off-project/src/apis/board/deleteBoard.ts":"5","/Users/brinc/WebstormProjects/df-off-project/src/apis/board/getBestArticles.tsx":"6","/Users/brinc/WebstormProjects/df-off-project/src/apis/board/getBoardCoundByHashtag.ts":"7","/Users/brinc/WebstormProjects/df-off-project/src/apis/board/getBoardDetail.ts":"8","/Users/brinc/WebstormProjects/df-off-project/src/apis/board/getBoardList.ts":"9","/Users/brinc/WebstormProjects/df-off-project/src/apis/board/getCharacterList.ts":"10","/Users/brinc/WebstormProjects/df-off-project/src/apis/board/getHashtagList.ts":"11","/Users/brinc/WebstormProjects/df-off-project/src/apis/board/getLatestBoard.ts":"12","/Users/brinc/WebstormProjects/df-off-project/src/apis/board/postBoard.ts":"13","/Users/brinc/WebstormProjects/df-off-project/src/apis/board/postBoardLike.ts":"14","/Users/brinc/WebstormProjects/df-off-project/src/apis/board/postImage.ts":"15","/Users/brinc/WebstormProjects/df-off-project/src/apis/board/putBoard.ts":"16","/Users/brinc/WebstormProjects/df-off-project/src/apis/boardComment/deleteBoardComment.ts":"17","/Users/brinc/WebstormProjects/df-off-project/src/apis/boardComment/getBoardComment.tsx":"18","/Users/brinc/WebstormProjects/df-off-project/src/apis/boardComment/getChildrenComment.ts":"19","/Users/brinc/WebstormProjects/df-off-project/src/apis/boardComment/postBoardComment.ts":"20","/Users/brinc/WebstormProjects/df-off-project/src/apis/boardComment/postChildrenComment.ts":"21","/Users/brinc/WebstormProjects/df-off-project/src/apis/boardComment/postCommentLike.ts":"22","/Users/brinc/WebstormProjects/df-off-project/src/apis/boardComment/putBoardComment.ts":"23","/Users/brinc/WebstormProjects/df-off-project/src/apis/character/getCharacterDetail.ts":"24","/Users/brinc/WebstormProjects/df-off-project/src/apis/character/getCharacters.ts":"25","/Users/brinc/WebstormProjects/df-off-project/src/apis/character/getCharactersAutoComplete.ts":"26","/Users/brinc/WebstormProjects/df-off-project/src/apis/data/index.tsx":"27","/Users/brinc/WebstormProjects/df-off-project/src/apis/data/route/index.ts":"28","/Users/brinc/WebstormProjects/df-off-project/src/apis/data/urls/index.ts":"29","/Users/brinc/WebstormProjects/df-off-project/src/apis/file/getFile.ts":"30","/Users/brinc/WebstormProjects/df-off-project/src/apis/myPage/deleteCharacterFromUserAccount.ts":"31","/Users/brinc/WebstormProjects/df-off-project/src/apis/myPage/getMyActivities.ts":"32","/Users/brinc/WebstormProjects/df-off-project/src/apis/myPage/getMyPageResponse.ts":"33","/Users/brinc/WebstormProjects/df-off-project/src/apis/myPage/getValidateNickname.ts":"34","/Users/brinc/WebstormProjects/df-off-project/src/apis/myPage/postCharacterToUserAccount.ts":"35","/Users/brinc/WebstormProjects/df-off-project/src/apis/myPage/putAvatar.ts":"36","/Users/brinc/WebstormProjects/df-off-project/src/apis/myPage/putChangeNickname.ts":"37","/Users/brinc/WebstormProjects/df-off-project/src/apis/myPage/putChangePassword.ts":"38","/Users/brinc/WebstormProjects/df-off-project/src/components/BestContent/index.tsx":"39","/Users/brinc/WebstormProjects/df-off-project/src/components/CharactersList/index.tsx":"40","/Users/brinc/WebstormProjects/df-off-project/src/components/CollapseButton/index.tsx":"41","/Users/brinc/WebstormProjects/df-off-project/src/components/CustomSearchBox/index.tsx":"42","/Users/brinc/WebstormProjects/df-off-project/src/components/CustomTable/index.tsx":"43","/Users/brinc/WebstormProjects/df-off-project/src/components/ErrorScreen/index.tsx":"44","/Users/brinc/WebstormProjects/df-off-project/src/components/Header/HeaderProfile.tsx":"45","/Users/brinc/WebstormProjects/df-off-project/src/components/Header/index.tsx":"46","/Users/brinc/WebstormProjects/df-off-project/src/components/ImageUploader/index.tsx":"47","/Users/brinc/WebstormProjects/df-off-project/src/components/MobileHeader/index.tsx":"48","/Users/brinc/WebstormProjects/df-off-project/src/components/SearchCharacterModal/index.tsx":"49","/Users/brinc/WebstormProjects/df-off-project/src/components/Skeleton/BoardDetailSkeleton/index.tsx":"50","/Users/brinc/WebstormProjects/df-off-project/src/components/Skeleton/BoardListSkeleton /index.tsx":"51","/Users/brinc/WebstormProjects/df-off-project/src/components/Skeleton/CharacterDetailSkeleton/index.tsx":"52","/Users/brinc/WebstormProjects/df-off-project/src/components/ValidateTextField/index.tsx":"53","/Users/brinc/WebstormProjects/df-off-project/src/components/application/character/RankingCharacterImg.tsx":"54","/Users/brinc/WebstormProjects/df-off-project/src/components/application/error/BadRequest.tsx":"55","/Users/brinc/WebstormProjects/df-off-project/src/components/application/footer/Footer.tsx":"56","/Users/brinc/WebstormProjects/df-off-project/src/components/application/ui/ImgOpacityButton.tsx":"57","/Users/brinc/WebstormProjects/df-off-project/src/components/application/ui/ModalTitle.tsx":"58","/Users/brinc/WebstormProjects/df-off-project/src/constants/queryKeys.ts":"59","/Users/brinc/WebstormProjects/df-off-project/src/context/authContext.tsx":"60","/Users/brinc/WebstormProjects/df-off-project/src/data/BoardData.ts":"61","/Users/brinc/WebstormProjects/df-off-project/src/data/HeaderData.ts":"62","/Users/brinc/WebstormProjects/df-off-project/src/data/MainPageRankingData.ts":"63","/Users/brinc/WebstormProjects/df-off-project/src/data/ProfileIconData.ts":"64","/Users/brinc/WebstormProjects/df-off-project/src/data/SocialLoginButons.ts":"65","/Users/brinc/WebstormProjects/df-off-project/src/hooks/authHooks/useAuthError.ts":"66","/Users/brinc/WebstormProjects/df-off-project/src/hooks/authHooks/useAuthSuccess.ts":"67","/Users/brinc/WebstormProjects/df-off-project/src/hooks/authHooks/useLogin.ts":"68","/Users/brinc/WebstormProjects/df-off-project/src/hooks/authHooks/useLogout.ts":"69","/Users/brinc/WebstormProjects/df-off-project/src/hooks/authHooks/useRegister.ts":"70","/Users/brinc/WebstormProjects/df-off-project/src/hooks/authHooks/useUser.ts":"71","/Users/brinc/WebstormProjects/df-off-project/src/hooks/useCheckbox.tsx":"72","/Users/brinc/WebstormProjects/df-off-project/src/hooks/useInput.tsx":"73","/Users/brinc/WebstormProjects/df-off-project/src/hooks/useModal.tsx":"74","/Users/brinc/WebstormProjects/df-off-project/src/hooks/useNavBar.ts":"75","/Users/brinc/WebstormProjects/df-off-project/src/hooks/useSelectSearch.tsx":"76","/Users/brinc/WebstormProjects/df-off-project/src/index.tsx":"77","/Users/brinc/WebstormProjects/df-off-project/src/interfaces/ArticleType.ts":"78","/Users/brinc/WebstormProjects/df-off-project/src/interfaces/AutoCompleteCharacterData.ts":"79","/Users/brinc/WebstormProjects/df-off-project/src/interfaces/BestArticleType.ts":"80","/Users/brinc/WebstormProjects/df-off-project/src/interfaces/BoardActivitiesJson.ts":"81","/Users/brinc/WebstormProjects/df-off-project/src/interfaces/BoardDetailData.ts":"82","/Users/brinc/WebstormProjects/df-off-project/src/interfaces/BoardListData.ts":"83","/Users/brinc/WebstormProjects/df-off-project/src/interfaces/CharacterDetailJson.ts":"84","/Users/brinc/WebstormProjects/df-off-project/src/interfaces/CharactersData.ts":"85","/Users/brinc/WebstormProjects/df-off-project/src/interfaces/CommentActivitiesJson.ts":"86","/Users/brinc/WebstormProjects/df-off-project/src/interfaces/CommentListData.ts":"87","/Users/brinc/WebstormProjects/df-off-project/src/interfaces/ContentFlowData.ts":"88","/Users/brinc/WebstormProjects/df-off-project/src/interfaces/MyPageResponse.ts":"89","/Users/brinc/WebstormProjects/df-off-project/src/interfaces/NotificationActivities.ts":"90","/Users/brinc/WebstormProjects/df-off-project/src/interfaces/SeachBox.ts":"91","/Users/brinc/WebstormProjects/df-off-project/src/pages/Board/Detail/index.tsx":"92","/Users/brinc/WebstormProjects/df-off-project/src/pages/Board/SpeedDial/index.tsx":"93","/Users/brinc/WebstormProjects/df-off-project/src/pages/Board/Write/index.tsx":"94","/Users/brinc/WebstormProjects/df-off-project/src/pages/Board/index.tsx":"95","/Users/brinc/WebstormProjects/df-off-project/src/pages/Characters/Detail/CharacterEquipmentModal/index.tsx":"96","/Users/brinc/WebstormProjects/df-off-project/src/pages/Characters/Detail/CharacterProfile/index.tsx":"97","/Users/brinc/WebstormProjects/df-off-project/src/pages/Characters/Detail/index.tsx":"98","/Users/brinc/WebstormProjects/df-off-project/src/pages/Characters/index.tsx":"99","/Users/brinc/WebstormProjects/df-off-project/src/pages/Home/AuthModal/LoginPage.tsx":"100","/Users/brinc/WebstormProjects/df-off-project/src/pages/Home/AuthModal/ProfileIconChangeModal.tsx":"101","/Users/brinc/WebstormProjects/df-off-project/src/pages/Home/AuthModal/RegisterPage.tsx":"102","/Users/brinc/WebstormProjects/df-off-project/src/pages/Home/AuthModal/SocialLogin.tsx":"103","/Users/brinc/WebstormProjects/df-off-project/src/pages/Home/AuthModal/SocialRegister.tsx":"104","/Users/brinc/WebstormProjects/df-off-project/src/pages/Home/AuthModal/index.tsx":"105","/Users/brinc/WebstormProjects/df-off-project/src/pages/Home/Tables/CharacterRanking/index.tsx":"106","/Users/brinc/WebstormProjects/df-off-project/src/pages/Home/Tables/LatestBoard/index.tsx":"107","/Users/brinc/WebstormProjects/df-off-project/src/pages/Home/index.tsx":"108","/Users/brinc/WebstormProjects/df-off-project/src/pages/MyPage/Modal/CharacterLink/index.tsx":"109","/Users/brinc/WebstormProjects/df-off-project/src/pages/MyPage/Modal/MyActivities/index.tsx":"110","/Users/brinc/WebstormProjects/df-off-project/src/pages/MyPage/Modal/UserDetailEdit/NicknameEdit/index.tsx":"111","/Users/brinc/WebstormProjects/df-off-project/src/pages/MyPage/Modal/UserDetailEdit/PasswordEdit/index.tsx":"112","/Users/brinc/WebstormProjects/df-off-project/src/pages/MyPage/Modal/UserDetailEdit/index.tsx":"113","/Users/brinc/WebstormProjects/df-off-project/src/pages/MyPage/ProfileMenus/index.tsx":"114","/Users/brinc/WebstormProjects/df-off-project/src/pages/MyPage/UserCharacters/index.tsx":"115","/Users/brinc/WebstormProjects/df-off-project/src/pages/MyPage/index.tsx":"116","/Users/brinc/WebstormProjects/df-off-project/src/react-app-env.d.ts":"117","/Users/brinc/WebstormProjects/df-off-project/src/redux/index.ts":"118","/Users/brinc/WebstormProjects/df-off-project/src/redux/store.ts":"119","/Users/brinc/WebstormProjects/df-off-project/src/reportWebVitals.ts":"120","/Users/brinc/WebstormProjects/df-off-project/src/service/authService.ts":"121","/Users/brinc/WebstormProjects/df-off-project/src/setupTests.ts":"122","/Users/brinc/WebstormProjects/df-off-project/src/storage/userLocalStorage.ts":"123","/Users/brinc/WebstormProjects/df-off-project/src/utils/Portal.tsx":"124","/Users/brinc/WebstormProjects/df-off-project/tailwind.config.js":"125"},{"size":273,"mtime":1676860784460,"results":"126","hashOfConfig":"127"},{"size":1958,"mtime":1690425955508,"results":"128","hashOfConfig":"127"},{"size":1148,"mtime":1690440908382,"results":"129","hashOfConfig":"127"},{"size":1438,"mtime":1690440907896,"results":"130","hashOfConfig":"127"},{"size":220,"mtime":1690440907907,"results":"131","hashOfConfig":"127"},{"size":2184,"mtime":1690440907937,"results":"132","hashOfConfig":"127"},{"size":167,"mtime":1690440907941,"results":"133","hashOfConfig":"127"},{"size":144,"mtime":1690440907945,"results":"134","hashOfConfig":"127"},{"size":142,"mtime":1690440907949,"results":"135","hashOfConfig":"127"},{"size":216,"mtime":1690440907953,"results":"136","hashOfConfig":"127"},{"size":170,"mtime":1690440907957,"results":"137","hashOfConfig":"127"},{"size":688,"mtime":1690440907965,"results":"138","hashOfConfig":"127"},{"size":423,"mtime":1690440907969,"results":"139","hashOfConfig":"127"},{"size":291,"mtime":1690440907974,"results":"140","hashOfConfig":"127"},{"size":629,"mtime":1690440907988,"results":"141","hashOfConfig":"127"},{"size":285,"mtime":1690440908047,"results":"142","hashOfConfig":"127"},{"size":247,"mtime":1690440908067,"results":"143","hashOfConfig":"127"},{"size":231,"mtime":1690440908116,"results":"144","hashOfConfig":"127"},{"size":334,"mtime":1690440908138,"results":"145","hashOfConfig":"127"},{"size":460,"mtime":1690425040932,"results":"146","hashOfConfig":"127"},{"size":469,"mtime":1690440908159,"results":"147","hashOfConfig":"127"},{"size":251,"mtime":1690440908165,"results":"148","hashOfConfig":"127"},{"size":438,"mtime":1690440908174,"results":"149","hashOfConfig":"127"},{"size":1724,"mtime":1690441333628,"results":"150","hashOfConfig":"127"},{"size":867,"mtime":1690440908213,"results":"151","hashOfConfig":"127"},{"size":951,"mtime":1690441333638,"results":"152","hashOfConfig":"127"},{"size":247,"mtime":1690440908241,"results":"153","hashOfConfig":"127"},{"size":323,"mtime":1690440908249,"results":"154","hashOfConfig":"127"},{"size":2002,"mtime":1690440908261,"results":"155","hashOfConfig":"127"},{"size":141,"mtime":1690440908266,"results":"156","hashOfConfig":"127"},{"size":359,"mtime":1690440908271,"results":"157","hashOfConfig":"127"},{"size":418,"mtime":1690440908278,"results":"158","hashOfConfig":"127"},{"size":228,"mtime":1690440908286,"results":"159","hashOfConfig":"127"},{"size":272,"mtime":1690440908295,"results":"160","hashOfConfig":"127"},{"size":230,"mtime":1690441433022,"results":"161","hashOfConfig":"127"},{"size":219,"mtime":1690425041022,"results":"162","hashOfConfig":"127"},{"size":274,"mtime":1690440908324,"results":"163","hashOfConfig":"127"},{"size":348,"mtime":1690440908330,"results":"164","hashOfConfig":"127"},{"size":4153,"mtime":1690441150259,"results":"165","hashOfConfig":"127"},{"size":6829,"mtime":1690440908477,"results":"166","hashOfConfig":"127"},{"size":1707,"mtime":1690425045404,"results":"167","hashOfConfig":"127"},{"size":12737,"mtime":1690440908525,"results":"168","hashOfConfig":"127"},{"size":2727,"mtime":1690441333739,"results":"169","hashOfConfig":"127"},{"size":721,"mtime":1690440908560,"results":"170","hashOfConfig":"127"},{"size":985,"mtime":1690441150246,"results":"171","hashOfConfig":"127"},{"size":11157,"mtime":1690440908591,"results":"172","hashOfConfig":"127"},{"size":1875,"mtime":1690426234957,"results":"173","hashOfConfig":"127"},{"size":6395,"mtime":1690440908612,"results":"174","hashOfConfig":"127"},{"size":2029,"mtime":1690441150255,"results":"175","hashOfConfig":"127"},{"size":1263,"mtime":1690440908626,"results":"176","hashOfConfig":"127"},{"size":1715,"mtime":1690440908632,"results":"177","hashOfConfig":"127"},{"size":4881,"mtime":1690441150241,"results":"178","hashOfConfig":"127"},{"size":3741,"mtime":1690440908650,"results":"179","hashOfConfig":"127"},{"size":821,"mtime":1690440908390,"results":"180","hashOfConfig":"127"},{"size":1667,"mtime":1690440908402,"results":"181","hashOfConfig":"127"},{"size":897,"mtime":1690440908413,"results":"182","hashOfConfig":"127"},{"size":608,"mtime":1690440908423,"results":"183","hashOfConfig":"127"},{"size":341,"mtime":1690440908430,"results":"184","hashOfConfig":"127"},{"size":46,"mtime":1690440908656,"results":"185","hashOfConfig":"127"},{"size":738,"mtime":1690440908662,"results":"186","hashOfConfig":"127"},{"size":416,"mtime":1690440908667,"results":"187","hashOfConfig":"127"},{"size":875,"mtime":1690441388354,"results":"188","hashOfConfig":"127"},{"size":293,"mtime":1690440908676,"results":"189","hashOfConfig":"127"},{"size":1408,"mtime":1690440908682,"results":"190","hashOfConfig":"127"},{"size":646,"mtime":1690440908687,"results":"191","hashOfConfig":"127"},{"size":912,"mtime":1690440908695,"results":"192","hashOfConfig":"127"},{"size":839,"mtime":1690440908699,"results":"193","hashOfConfig":"127"},{"size":1095,"mtime":1690440908703,"results":"194","hashOfConfig":"127"},{"size":715,"mtime":1690440908708,"results":"195","hashOfConfig":"127"},{"size":1020,"mtime":1690440908713,"results":"196","hashOfConfig":"127"},{"size":1147,"mtime":1690440908717,"results":"197","hashOfConfig":"127"},{"size":611,"mtime":1690440908722,"results":"198","hashOfConfig":"127"},{"size":1159,"mtime":1690440908729,"results":"199","hashOfConfig":"127"},{"size":411,"mtime":1690440908743,"results":"200","hashOfConfig":"127"},{"size":462,"mtime":1690440908758,"results":"201","hashOfConfig":"127"},{"size":861,"mtime":1690440908777,"results":"202","hashOfConfig":"127"},{"size":1648,"mtime":1690440908813,"results":"203","hashOfConfig":"127"},{"size":1531,"mtime":1690440908821,"results":"204","hashOfConfig":"127"},{"size":219,"mtime":1690440908835,"results":"205","hashOfConfig":"127"},{"size":556,"mtime":1690440908842,"results":"206","hashOfConfig":"127"},{"size":1076,"mtime":1690440908854,"results":"207","hashOfConfig":"127"},{"size":892,"mtime":1690440908859,"results":"208","hashOfConfig":"127"},{"size":1431,"mtime":1690440908870,"results":"209","hashOfConfig":"127"},{"size":5299,"mtime":1690440908887,"results":"210","hashOfConfig":"127"},{"size":909,"mtime":1690440908892,"results":"211","hashOfConfig":"127"},{"size":1053,"mtime":1690440908897,"results":"212","hashOfConfig":"127"},{"size":1121,"mtime":1690440908908,"results":"213","hashOfConfig":"127"},{"size":3096,"mtime":1690440908916,"results":"214","hashOfConfig":"127"},{"size":501,"mtime":1690440908920,"results":"215","hashOfConfig":"127"},{"size":930,"mtime":1690440908924,"results":"216","hashOfConfig":"127"},{"size":1171,"mtime":1690440908928,"results":"217","hashOfConfig":"127"},{"size":35588,"mtime":1690441293310,"results":"218","hashOfConfig":"127"},{"size":3438,"mtime":1690441333983,"results":"219","hashOfConfig":"127"},{"size":20391,"mtime":1690436715118,"results":"220","hashOfConfig":"127"},{"size":22128,"mtime":1690441236054,"results":"221","hashOfConfig":"127"},{"size":1279,"mtime":1690440909065,"results":"222","hashOfConfig":"127"},{"size":6651,"mtime":1690440909078,"results":"223","hashOfConfig":"127"},{"size":21739,"mtime":1690440909108,"results":"224","hashOfConfig":"127"},{"size":4096,"mtime":1690440909118,"results":"225","hashOfConfig":"127"},{"size":5006,"mtime":1690440909142,"results":"226","hashOfConfig":"127"},{"size":4207,"mtime":1690441281416,"results":"227","hashOfConfig":"127"},{"size":5541,"mtime":1690441236057,"results":"228","hashOfConfig":"127"},{"size":1262,"mtime":1690440909183,"results":"229","hashOfConfig":"127"},{"size":1246,"mtime":1690440909189,"results":"230","hashOfConfig":"127"},{"size":2390,"mtime":1690440909126,"results":"231","hashOfConfig":"127"},{"size":7284,"mtime":1690440909210,"results":"232","hashOfConfig":"127"},{"size":5886,"mtime":1690440909224,"results":"233","hashOfConfig":"127"},{"size":1378,"mtime":1690440909195,"results":"234","hashOfConfig":"127"},{"size":2838,"mtime":1690426472422,"results":"235","hashOfConfig":"127"},{"size":11694,"mtime":1690440909262,"results":"236","hashOfConfig":"127"},{"size":3078,"mtime":1690440909274,"results":"237","hashOfConfig":"127"},{"size":4344,"mtime":1690440909283,"results":"238","hashOfConfig":"127"},{"size":1002,"mtime":1690425040774,"results":"239","hashOfConfig":"127"},{"size":6349,"mtime":1690440909292,"results":"240","hashOfConfig":"127"},{"size":1450,"mtime":1690440909297,"results":"241","hashOfConfig":"127"},{"size":4797,"mtime":1690440909237,"results":"242","hashOfConfig":"127"},{"size":40,"mtime":1676860791343,"results":"243","hashOfConfig":"127"},{"size":2423,"mtime":1690440909309,"results":"244","hashOfConfig":"127"},{"size":593,"mtime":1690425040982,"results":"245","hashOfConfig":"127"},{"size":425,"mtime":1676860784460,"results":"246","hashOfConfig":"127"},{"size":1378,"mtime":1690440909323,"results":"247","hashOfConfig":"127"},{"size":241,"mtime":1676860784460,"results":"248","hashOfConfig":"127"},{"size":600,"mtime":1690438514404,"results":"249","hashOfConfig":"127"},{"size":245,"mtime":1690425041480,"results":"250","hashOfConfig":"127"},{"size":156,"mtime":1690440909341,"results":"251","hashOfConfig":"127"},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hu0epv",{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","suppressedMessages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","suppressedMessages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","suppressedMessages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","suppressedMessages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"276","messages":"277","suppressedMessages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","suppressedMessages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"282","messages":"283","suppressedMessages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","suppressedMessages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","suppressedMessages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","suppressedMessages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","suppressedMessages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","suppressedMessages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"300","messages":"301","suppressedMessages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","suppressedMessages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"306","messages":"307","suppressedMessages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","suppressedMessages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"312","messages":"313","suppressedMessages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","suppressedMessages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"318","messages":"319","suppressedMessages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","suppressedMessages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"324","messages":"325","suppressedMessages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327"},{"filePath":"328","messages":"329","suppressedMessages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","suppressedMessages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"334","messages":"335","suppressedMessages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","suppressedMessages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","suppressedMessages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","suppressedMessages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"346","messages":"347","suppressedMessages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"349","messages":"350","suppressedMessages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"352","messages":"353","suppressedMessages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"355","messages":"356","suppressedMessages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"358","messages":"359","suppressedMessages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"361","messages":"362","suppressedMessages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"364","messages":"365","suppressedMessages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"367","messages":"368","suppressedMessages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"370","messages":"371","suppressedMessages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"373","messages":"374","suppressedMessages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"376","messages":"377","suppressedMessages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"379","messages":"380","suppressedMessages":"381","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382"},{"filePath":"383","messages":"384","suppressedMessages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"386","messages":"387","suppressedMessages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"389","messages":"390","suppressedMessages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"392","messages":"393","suppressedMessages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395"},{"filePath":"396","messages":"397","suppressedMessages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399"},{"filePath":"400","messages":"401","suppressedMessages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"403","messages":"404","suppressedMessages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"406","messages":"407","suppressedMessages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"409","messages":"410","suppressedMessages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"412","messages":"413","suppressedMessages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415"},{"filePath":"416","messages":"417","suppressedMessages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"419","messages":"420","suppressedMessages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"422","messages":"423","suppressedMessages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"425","messages":"426","suppressedMessages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"428","messages":"429","suppressedMessages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"431","messages":"432","suppressedMessages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"434","messages":"435","suppressedMessages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"437","messages":"438","suppressedMessages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"440","messages":"441","suppressedMessages":"442","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"443","messages":"444","suppressedMessages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"446","messages":"447","suppressedMessages":"448","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"449","messages":"450","suppressedMessages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"452","messages":"453","suppressedMessages":"454","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"455","messages":"456","suppressedMessages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"458","messages":"459","suppressedMessages":"460","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"461","messages":"462","suppressedMessages":"463","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"464","messages":"465","suppressedMessages":"466","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"467","messages":"468","suppressedMessages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"470","messages":"471","suppressedMessages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"473","messages":"474","suppressedMessages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476"},{"filePath":"477","messages":"478","suppressedMessages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"480","messages":"481","suppressedMessages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"483","messages":"484","suppressedMessages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"486","messages":"487","suppressedMessages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"489","messages":"490","suppressedMessages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"492","messages":"493","suppressedMessages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"495","messages":"496","suppressedMessages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"498","messages":"499","suppressedMessages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"501","messages":"502","suppressedMessages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"504","messages":"505","suppressedMessages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"507","messages":"508","suppressedMessages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"510","messages":"511","suppressedMessages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"513","messages":"514","suppressedMessages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"516","messages":"517","suppressedMessages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"519","messages":"520","suppressedMessages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"522","messages":"523","suppressedMessages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"525","messages":"526","suppressedMessages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"528","messages":"529","suppressedMessages":"530","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"531"},{"filePath":"532","messages":"533","suppressedMessages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"535"},{"filePath":"536","messages":"537","suppressedMessages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"539","messages":"540","suppressedMessages":"541","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542"},{"filePath":"543","messages":"544","suppressedMessages":"545","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546"},{"filePath":"547","messages":"548","suppressedMessages":"549","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"550","messages":"551","suppressedMessages":"552","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"553","messages":"554","suppressedMessages":"555","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"556"},{"filePath":"557","messages":"558","suppressedMessages":"559","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"560"},{"filePath":"561","messages":"562","suppressedMessages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"564","messages":"565","suppressedMessages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"567","messages":"568","suppressedMessages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"570","messages":"571","suppressedMessages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"573","messages":"574","suppressedMessages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"576","messages":"577","suppressedMessages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"579","messages":"580","suppressedMessages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"582"},{"filePath":"583","messages":"584","suppressedMessages":"585","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"586"},{"filePath":"587","messages":"588","suppressedMessages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"590","messages":"591","suppressedMessages":"592","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"593","messages":"594","suppressedMessages":"595","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596"},{"filePath":"597","messages":"598","suppressedMessages":"599","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"600","messages":"601","suppressedMessages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"603","messages":"604","suppressedMessages":"605","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"606","messages":"607","suppressedMessages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"609","messages":"610","suppressedMessages":"611","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"612","messages":"613","suppressedMessages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"615"},{"filePath":"616","messages":"617","suppressedMessages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"619","messages":"620","suppressedMessages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"622","messages":"623","suppressedMessages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"625","messages":"626","suppressedMessages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"628","messages":"629","suppressedMessages":"630","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"631","messages":"632","suppressedMessages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"634","messages":"635","suppressedMessages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"637","messages":"638","suppressedMessages":"639","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"640"},{"filePath":"641","messages":"642","suppressedMessages":"643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/brinc/WebstormProjects/df-off-project/src/App.test.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/App.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/AxiosClient/axiosClient.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/axiosClient.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/board/deleteBoard.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/board/getBestArticles.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/board/getBoardCoundByHashtag.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/board/getBoardDetail.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/board/getBoardList.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/board/getCharacterList.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/board/getHashtagList.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/board/getLatestBoard.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/board/postBoard.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/board/postBoardLike.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/board/postImage.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/board/putBoard.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/boardComment/deleteBoardComment.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/boardComment/getBoardComment.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/boardComment/getChildrenComment.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/boardComment/postBoardComment.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/boardComment/postChildrenComment.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/boardComment/postCommentLike.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/boardComment/putBoardComment.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/character/getCharacterDetail.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/character/getCharacters.ts",["644"],["645"],"import { CharactersData } from '../../interfaces/CharactersData';\nimport { RootState } from '../../redux/store';\nimport { setIsLoading } from '../../redux';\nimport { Action, ThunkAction } from '@reduxjs/toolkit';\nimport createInstance from '../axiosClient';\n\nexport const getCharacters = (\n  url: string,\n  // eslint-disable-next-line no-empty-pattern\n  setData: ({}: CharactersData) => void,\n): ThunkAction<void, RootState, unknown, Action> => {\n  return async (dispatch) => {\n    {\n      dispatch(setIsLoading(true));\n      setIsLoading(true);\n      createInstance\n        .get(url)\n        .then((res: any) => {\n          setData(res.data.characters);\n          setIsLoading(false);\n          dispatch(setIsLoading(false));\n        })\n        .catch((err: any) => {\n          dispatch(setIsLoading(false));\n          setIsLoading(false);\n        });\n    }\n  };\n};\n","/Users/brinc/WebstormProjects/df-off-project/src/apis/character/getCharactersAutoComplete.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/data/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/data/route/index.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/data/urls/index.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/file/getFile.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/myPage/deleteCharacterFromUserAccount.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/myPage/getMyActivities.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/myPage/getMyPageResponse.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/myPage/getValidateNickname.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/myPage/postCharacterToUserAccount.ts",[],["646"],"/Users/brinc/WebstormProjects/df-off-project/src/apis/myPage/putAvatar.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/myPage/putChangeNickname.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/apis/myPage/putChangePassword.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/components/BestContent/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/components/CharactersList/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/components/CollapseButton/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/components/CustomSearchBox/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/components/CustomTable/index.tsx",["647","648"],[],"import styled from 'styled-components';\nimport React, { ReactNode } from 'react';\nimport ReactLoading from 'react-loading';\nimport { Button, Card, ListItemButton } from '@mui/material';\nimport Typography from '@mui/material/Typography';\n\nconst TableContainer = styled(Card)`\n  border: 1px solid #e5e5e5;\n  box-shadow: 0px 0px 5px 0px rgba(0, 0, 0, 0.1);\n  margin-top: 20px;\n  margin-bottom: 20px;\n  border-radius: 10px;\n  width: 100%;\n  @media (max-width: 768px) {\n    margin-top: 10px;\n    margin-bottom: 10px;\n  }\n`;\n\nconst TableHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  padding: 5px 15px;\n  font-size: 22px;\n  color: #000;\n  border-bottom: 1px solid #e5e5e5;\n`;\n\nconst TableButton = styled.div`\n  font-size: 14px;\n  font-weight: 0;\n  color: silver;\n  display: flex;\n  flex-direction: row;\n  border-bottom: 1px solid #e5e5e5;\n\n  span {\n    cursor: pointer;\n\n    &:hover {\n      color: black;\n      font-size: 16px;\n      transition: 0.3s;\n    }\n  }\n`;\n\nconst TableTitleWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  gap: 10px;\n`;\n\ninterface TableMenuProps {\n  isSelected?: string;\n  menus: { name: string; id: string }[];\n  setIsSelected?: (value: string) => void;\n}\n\nconst TableMenu = (props: TableMenuProps) => {\n  return (\n    <TableButton>\n      {props.menus.map((item: { name: string; id: string }, index: number) => (\n        //선택된 버튼\n        <Button\n          key={index}\n          color={props.isSelected === item.id ? 'warning' : 'inherit'}\n          sx={{ padding: '2px 5px' }}\n          onClick={() => props.setIsSelected?.(item.id)}\n        >\n          {item.name}{' '}\n        </Button>\n      ))}\n    </TableButton>\n  );\n};\n\ninterface TableCustomProps {\n  title: ReactNode;\n  isSelected?: string;\n  setIsSelected?: (value: string) => void;\n  menus?: { name: string; id: string }[];\n  useMenu: boolean;\n  isLoading: boolean;\n  useIcon: boolean;\n  icon?: React.ReactNode;\n  children: React.ReactNode;\n}\n\nfunction CustomTable(props: TableCustomProps) {\n  return (\n    <TableContainer>\n      <TableHeader>\n        <TableTitleWrapper>\n          <Typography fontFamily={'Core Sans'}>{props.title}</Typography>\n          {props.isLoading && <ReactLoading type={'spinningBubbles'} color={'gray'} width={'25px'} height={'25px'} />}\n        </TableTitleWrapper>\n        {props.useIcon && props.icon}\n      </TableHeader>\n      {props.useMenu && props.menus && (\n        <TableMenu isSelected={props.isSelected} menus={props.menus} setIsSelected={props.setIsSelected} />\n      )}\n      {props.children}\n    </TableContainer>\n  );\n}\n\nexport default CustomTable;\n","/Users/brinc/WebstormProjects/df-off-project/src/components/ErrorScreen/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/components/Header/HeaderProfile.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/components/Header/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/components/ImageUploader/index.tsx",["649"],[],"import Box from '@mui/material/Box';\nimport { Avatar, Button } from '@mui/material';\nimport { MuiFileInput } from 'mui-file-input';\nimport { useEffect, useState } from 'react';\nimport putAvatar from '../../apis/myPage/putAvatar';\nimport { useUser } from '../../hooks/authHooks/useUser';\n\nfunction ImageUploader(props: { handleClose: () => void }) {\n  const { user } = useUser();\n  const [profile, setProfile] = useState<File | null>(null);\n  const [profileUrl, setProfileUrl] = useState<string>('');\n  useEffect(() => {\n    if (user) {\n      setProfileUrl(user.profileImgPath);\n    }\n  }, []);\n\n  const handleUpload = () => {\n    if (profile) {\n      const formData = new FormData();\n      formData.append('file', profile);\n      putAvatar(formData)\n        .then((res) => {\n          window.alert('프로필 사진이 변경되었습니다.');\n          props.handleClose();\n        })\n        .catch((err) => {\n          window.alert('프로필 사진 변경에 실패하였습니다.');\n          console.info(err);\n        });\n    }\n  };\n  const handleChange = (newValue: File | null) => {\n    setProfile(newValue);\n    if (!newValue) {\n      setProfileUrl(user?.profileImgPath || '');\n    } else {\n      setProfileUrl(URL.createObjectURL(newValue));\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        gap: 2,\n        padding: 2,\n      }}\n    >\n      <Avatar src={profileUrl} sx={{ width: 50, height: 50, position: 'relative' }} />\n      <MuiFileInput\n        value={profile}\n        onChange={handleChange}\n        inputProps={{\n          accept: 'image/*',\n          id: 'icon-button-file',\n        }}\n      />\n      <Button variant=\"contained\" onClick={handleUpload}>\n        변경\n      </Button>\n    </Box>\n  );\n}\n\nexport default ImageUploader;\n","/Users/brinc/WebstormProjects/df-off-project/src/components/MobileHeader/index.tsx",["650","651"],[],"import styled from 'styled-components';\nimport React, { useCallback, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAppDispatch } from '../../redux/store';\nimport { HeaderProfile } from '../Header/HeaderProfile';\nimport { Badge, Button, IconButton, Tooltip, Zoom } from '@mui/material';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBell, faUser } from '@fortawesome/free-solid-svg-icons';\nimport { setLoginModalOpened } from '../../redux';\nimport { useUser } from '../../hooks/authHooks/useUser';\n\nconst Container = styled.div`\n  display: none;\n  @media (max-width: 768px) {\n    display: flex;\n    padding: 0rem 1rem;\n    visibility: ${({ isOpened }: { isOpened: boolean }) => (isOpened ? 'visible' : 'hidden')};\n    background-color: #212124;\n    height: 100vh;\n    width: 45%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    transition: 0.3s ease-in-out;\n    opacity: ${({ isOpened }: { isOpened: boolean }) => (isOpened ? '100%' : '0')};\n    left: ${({ isOpened }: { isOpened: boolean }) => (isOpened ? '0' : '-100%')};\n    backdrop-filter: blur(2px);\n    z-index: 1;\n  }\n`;\n\nconst NavItem = styled.a`\n  color: #fff;\n  font-size: 1.5rem;\n  text-decoration: none;\n  transition: 0.3s ease-in-out;\n  padding: 10px 0;\n  &:hover {\n    color: cornflowerblue;\n  }\n\n  cursor: pointer;\n`;\n\nconst NavMenu = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  width: 100%;\n  height: 100%;\n`;\n\nconst Division = styled.div`\n  width: 100%;\n  height: 1px;\n  background-color: #fff;\n  margin: 10px 0;\n  opacity: 0.5;\n`;\n\nconst ProfileWrapper = styled.div`\n  display: flex;\n  position: relative;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n`;\n\n//네비바 바깥 누르면 닫히는 함수\n\ninterface NavProps {\n  isOpened: boolean;\n  menuList: { name: string; link: string }[];\n  handleClose: () => void;\n}\n\nconst Logo = styled(Button)`\n  && {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    padding-top: 10%;\n    font-size: 20px;\n    font-weight: 700;\n    color: #ffffff;\n    cursor: pointer;\n    padding-right: 0;\n\n    &:hover {\n      color: cornflowerblue;\n      background-color: transparent;\n    }\n  }\n`;\n\nconst ProfileMenu = styled.div`\n  position: absolute;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  left: 100%;\n  top: 2px;\n  width: 100%;\n  height: 100%;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);\n  z-index: 1;\n  background-color: white;\n  border-radius: 10px;\n  @media (max-width: 1200px) {\n    position: absolute;\n    right: 20%;\n    width: 140px;\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    left: 0;\n    top: 70%;\n    width: 0;\n    height: 0;\n    border: 8px solid transparent;\n    border-right-color: white;\n    border-left: 0;\n    margin-top: -20px;\n    margin-left: -8px;\n  }\n`;\n\nconst ProfileMenuList = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  gap: 10px;\n`;\n\nconst MenuIconWrapper = styled.div`\n  display: flex;\n  position: relative;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  color: #121212;\n`;\n\nconst MobileHeader = (props: NavProps) => {\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n\n  const handleModalOpen = useCallback(() => {\n    dispatch(setLoginModalOpened(true));\n    props.handleClose();\n  }, [setLoginModalOpened, dispatch, props.handleClose]);\n  const { user } = useUser();\n  const notificationCount = user?.notificationCount;\n  const [profileIsOpened, setProfileIsOpened] = useState(false);\n  const handleProfileOpen = useCallback(() => {\n    setProfileIsOpened(!profileIsOpened);\n  }, [profileIsOpened]);\n  const handleNavigateToMyPage = useCallback(() => {\n    navigate('/mypage/');\n    setProfileIsOpened(false);\n    props.handleClose();\n  }, [navigate]);\n  return (\n    <Container isOpened={props.isOpened}>\n      <NavMenu>\n        <Logo\n          onClick={(e) => {\n            navigate('/');\n            props.handleClose();\n            setProfileIsOpened(false);\n          }}\n        >\n          커뮤니티\n        </Logo>\n        {user && (\n          <ProfileWrapper>\n            <HeaderProfile onClick={handleProfileOpen} />\n            {user && (\n              <Zoom in={profileIsOpened}>\n                <ProfileMenu>\n                  <ProfileMenuList>\n                    <Tooltip title={'마이페이지'} placement={'bottom'}>\n                      <IconButton onClick={handleNavigateToMyPage}>\n                        <MenuIconWrapper>\n                          <FontAwesomeIcon icon={faUser} size=\"sm\" />\n                        </MenuIconWrapper>\n                      </IconButton>\n                    </Tooltip>\n                    <Tooltip title={'알림'} placement={'bottom'}>\n                      <IconButton>\n                        {notificationCount === 0 && (\n                          <MenuIconWrapper>\n                            <FontAwesomeIcon icon={faBell} size=\"sm\" />\n                          </MenuIconWrapper>\n                        )}\n                        {notificationCount !== 0 && (\n                          <Badge badgeContent={notificationCount} color=\"primary\">\n                            <MenuIconWrapper>\n                              <FontAwesomeIcon icon={faBell} size=\"sm\" />\n                            </MenuIconWrapper>\n                          </Badge>\n                        )}\n                      </IconButton>\n                    </Tooltip>\n                  </ProfileMenuList>\n                </ProfileMenu>\n              </Zoom>\n            )}\n          </ProfileWrapper>\n        )}\n        {user && <Division />}\n        {user && <NavItem onClick={() => {}}>로그아웃</NavItem>}\n        {!user && <NavItem onClick={handleModalOpen}>로그인</NavItem>}\n        {props.menuList.map((item, index) => {\n          return (\n            <NavItem\n              key={index}\n              onClick={(e) => {\n                navigate(item.link);\n                props.handleClose();\n                setProfileIsOpened(false);\n              }}\n            >\n              {item.name}\n            </NavItem>\n          );\n        })}\n      </NavMenu>\n    </Container>\n  );\n};\n\nexport default MobileHeader;\n","/Users/brinc/WebstormProjects/df-off-project/src/components/SearchCharacterModal/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/components/Skeleton/BoardDetailSkeleton/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/components/Skeleton/BoardListSkeleton /index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/components/Skeleton/CharacterDetailSkeleton/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/components/ValidateTextField/index.tsx",["652","653"],[],"import { Box, Button, TextField, Tooltip } from '@mui/material';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport * as React from 'react';\nimport { useEffect } from 'react';\nimport { FieldError, UseFormRegister, UseFormWatch } from 'react-hook-form';\nimport { AxiosResponse } from 'axios';\nimport { UseFormSetFocus } from 'react-hook-form/dist/types/form';\nimport Typography from '@mui/material/Typography';\nimport styled from '@emotion/styled';\n\ninterface ValidateFormProps {\n  register: UseFormRegister<any>;\n  watch: UseFormWatch<any>;\n  validatedMessage: string;\n  inValidatedMessage: string;\n  defaultTooltipMessage: string;\n  formName: string;\n  errors: FieldError | undefined;\n  validateFunction: (value: string) => Promise<AxiosResponse<any, any>>;\n  width?: number;\n  height?: number;\n  placeholder: string;\n  isValidated: boolean;\n  setIsValidated: (value: boolean) => void;\n  isChecked: boolean;\n  setIsChecked: (value: boolean) => void;\n  helperText: string;\n  fontFamily: string;\n  setFocus: UseFormSetFocus<any>;\n}\n\nconst StyledButton = styled(Button)`\n  position: absolute;\n  right: 0;\n  top: 10px;\n  min-width: auto;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n`;\n\nconst ValidateForm = (props: ValidateFormProps) => {\n  const validateValue = (value: string) => {\n    if (props.isChecked) return;\n    props\n      .validateFunction(value)\n      .then((res) => {\n        props.setFocus(props.formName);\n        // Response is must be boolean type.\n        if (res.data === true) {\n          props.setIsValidated(true);\n          props.setIsChecked(true);\n        } else {\n          props.setIsValidated(false);\n          props.setIsChecked(true);\n        }\n      })\n      .catch((err) => {\n        props.setIsValidated(false);\n        props.setIsChecked(true);\n      });\n  };\n\n  useEffect(() => {\n    // Change to default status if value is changed.\n    props.setIsChecked(false);\n    props.setIsValidated(false);\n  }, [props.watch(props.formName)]);\n\n  const boxStyleObject = {\n    display: 'flex',\n    flexDirection: 'column',\n    position: 'relative',\n    width: props.width ? `${props.width}px` : '100%',\n    height: props.height ? `${props.height}px` : '100%',\n    justifyContent: 'center',\n  };\n\n  return (\n    <Box sx={boxStyleObject}>\n      <TextField\n        {...props.register(props.formName)}\n        color={props.isValidated ? 'success' : props.isChecked ? 'error' : 'primary'}\n        error={!!props.errors}\n        variant={'standard'}\n        sx={{\n          '& .MuiInputBase-root': {\n            fontFamily: props.fontFamily,\n          },\n        }}\n        label={\n          <Typography fontFamily={props.fontFamily} component={'span'}>\n            {props.placeholder}\n          </Typography>\n        }\n        helperText={\n          <Typography fontFamily={props.fontFamily} component={'span'} fontSize={'0.75rem'}>\n            {props.errors?.message || props.helperText}\n          </Typography>\n        }\n      />\n      <StyledButton\n        disabled={!!props.errors || !props.watch(props.formName)}\n        onClick={() => validateValue(props.watch(props.formName))}\n      >\n        <Tooltip\n          placement={'top-end'}\n          title={\n            props.isChecked\n              ? props.isValidated\n                ? props.validatedMessage\n                : props.inValidatedMessage\n              : props.defaultTooltipMessage\n          }\n          arrow\n        >\n          <CheckCircleIcon\n            sx={{\n              color: props.isChecked ? (props.isValidated ? '#00B890' : '#F64668') : '#939191',\n              transition: 'all 0.3s ease-in-out',\n            }}\n          />\n        </Tooltip>\n      </StyledButton>\n    </Box>\n  );\n};\n\nexport default ValidateForm;\n","/Users/brinc/WebstormProjects/df-off-project/src/components/application/character/RankingCharacterImg.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/components/application/error/BadRequest.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/components/application/footer/Footer.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/components/application/ui/ImgOpacityButton.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/components/application/ui/ModalTitle.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/constants/queryKeys.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/context/authContext.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/data/BoardData.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/data/HeaderData.ts",[],["654","655"],"/Users/brinc/WebstormProjects/df-off-project/src/data/MainPageRankingData.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/data/ProfileIconData.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/data/SocialLoginButons.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/hooks/authHooks/useAuthError.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/hooks/authHooks/useAuthSuccess.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/hooks/authHooks/useLogin.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/hooks/authHooks/useLogout.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/hooks/authHooks/useRegister.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/hooks/authHooks/useUser.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/hooks/useCheckbox.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/hooks/useInput.tsx",["656"],[],"import * as React from 'react';\nimport { useCallback, useRef, useState } from 'react';\n\ninterface Options {\n  initialValue?: string;\n  type?: 'string';\n  //검증용 정규표현식\n  regex?: RegExp;\n  errorMessage?: string;\n  placeholder?: string;\n}\n\ntype returnType = [string, (e: React.ChangeEvent<HTMLInputElement>) => void, boolean, string, string, boolean];\n\nexport function useInput(options?: Options): returnType {\n  const { initialValue, type = 'string', regex, errorMessage, placeholder } = options || {};\n  const [value, setValue] = useState<string>(initialValue || '');\n  const isValid = useRef<boolean>(true);\n  const isValidFinal = useRef<boolean>(true);\n\n  const onChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const { value } = e.target;\n      setValue(value);\n      if (regex) {\n        isValid.current = regex.test(value);\n      }\n      if (value === '') {\n        if (regex) {\n          isValidFinal.current = false;\n          isValid.current = true;\n        }\n      }\n    },\n    [type, regex],\n  );\n  return [value, onChange, isValid.current, errorMessage || '', placeholder || '', isValidFinal.current];\n}\n","/Users/brinc/WebstormProjects/df-off-project/src/hooks/useModal.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/hooks/useNavBar.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/hooks/useSelectSearch.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/interfaces/ArticleType.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/interfaces/AutoCompleteCharacterData.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/interfaces/BestArticleType.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/interfaces/BoardActivitiesJson.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/interfaces/BoardDetailData.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/interfaces/BoardListData.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/interfaces/CharacterDetailJson.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/interfaces/CharactersData.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/interfaces/CommentActivitiesJson.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/interfaces/CommentListData.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/interfaces/ContentFlowData.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/interfaces/MyPageResponse.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/interfaces/NotificationActivities.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/interfaces/SeachBox.ts",["657"],[],"import React from 'react';\n\nexport interface SearchOption {\n  id: string;\n  title: string;\n  content: string;\n  footer: string;\n  optionValue1: string | '';\n  optionValue2: string | '';\n  type: 'postSignUp' | 'character';\n}\n\nexport interface SearchType {\n  type: string;\n  url: string;\n}\n\nexport interface SelectSearchProps {\n  selectOptions: { value: string; label: string }[];\n  useSearchOption: boolean;\n  placeholder: string;\n  searchOptions?: SearchOption[];\n  setSearchOptions?: (data: any) => void;\n  selectLoading: boolean;\n  searchType: SearchType;\n  handleNavigate: (url: string, type: string, searchValue: string, selectValue: string) => void;\n  searchValue: string;\n  selectValue: string;\n  handleSearchValueChange: (query: string) => void;\n  handleSelectValueChange: (e: any) => void;\n  handleOptionMouseDown?: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n\n  color?: string;\n\n  width?: string;\n  height?: string;\n\n  useAutoComplete?: boolean;\n\n  autoCompleteUrl?: string;\n\n  autoCompleteHandler?: (url: string, setData: ({}: SearchOption[]) => void) => void;\n\n  handleOptionRemove?: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n}\n","/Users/brinc/WebstormProjects/df-off-project/src/pages/Board/Detail/index.tsx",["658","659","660","661","662","663","664","665"],["666","667"],"import {\n  Avatar,\n  Button,\n  Checkbox,\n  Chip,\n  CircularProgress,\n  Container,\n  Divider,\n  FormControlLabel,\n  Grow,\n  IconButton,\n  InputBase,\n  Paper,\n  styled,\n} from '@mui/material';\nimport { useParams } from 'react-router';\nimport Box from '@mui/material/Box';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { BoardDetailData } from '../../../interfaces/BoardDetailData';\nimport { setIsLoading } from '../../../redux';\nimport { RootState, useAppDispatch } from '../../../redux/store';\nimport { useSelector } from 'react-redux';\nimport { getBoardDetail } from '../../../apis/board/getBoardDetail';\nimport { BOARD_BEST_ARTICLE_URL, BOARD_DETAIL_URL } from '../../../apis/data/urls';\nimport BestContent, { ContentFlowProps } from '../../../components/BestContent';\nimport { getBestArticles } from '../../../apis/board/getBestArticles';\nimport { useNavigate } from 'react-router-dom';\nimport Typography from '@mui/material/Typography';\nimport '@toast-ui/editor/dist/toastui-editor.css';\nimport '@toast-ui/editor/dist/toastui-editor-viewer.css';\nimport { Favorite, FavoriteBorder } from '@mui/icons-material';\nimport { postBoardLike } from '../../../apis/board/postBoardLike';\nimport SendIcon from '@mui/icons-material/Send';\nimport {\n  CommentListData,\n  CommentListDataComments,\n  CommentListDataLikeResponses,\n} from '../../../interfaces/CommentListData';\nimport { getBoardComment } from '../../../apis/boardComment/getBoardComment';\nimport * as yup from 'yup';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { postBoardComment } from '../../../apis/boardComment/postBoardComment';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMessage } from '@fortawesome/free-solid-svg-icons';\nimport { deleteBoardComment } from '../../../apis/boardComment/deleteBoardComment';\nimport { deleteBoard } from '../../../apis/board/deleteBoard';\nimport { BadRequest } from '../../../components/application/error/BadRequest';\nimport BoardDetailSkeleton from '../../../components/Skeleton/BoardDetailSkeleton';\nimport { postCommentLike } from '../../../apis/boardComment/postCommentLike';\nimport { BOARD_INSERT_FORM_ROUTE, BOARD_UPDATE_FORM_ROUTE } from '../../../apis/data/route';\nimport { putBoardComment } from '../../../apis/boardComment/putBoardComment';\nimport { postChildrenComment } from '../../../apis/boardComment/postChildrenComment';\nimport { getChildrenComment } from '../../../apis/boardComment/getChildrenComment';\nimport { BestArticleNoDataWrapper, BestArticleTitleComponent, CharacterChip, getBoardType, TagChip } from '..';\nimport { useUser } from '../../../hooks/authHooks/useUser';\n\nconst TagContainer = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 5px;\n`;\n\nconst BoardTitleWrapper = styled(Typography)`\n  display: block;\n  font-size: 20px;\n  font-weight: bold;\n  color: black;\n  width: 100%;\n  text-align: left;\n`;\nconst BoardDetailContainer = styled(Box)`\n  display: flex;\n  position: relative;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n  border-top: 1px solid #e0e0e0;\n  padding: 10px;\n`;\n\nconst BoardAuthorContainer = styled(Box)`\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  flex-direction: row;\n  width: 100%;\n  gap: 5px;\n`;\n\nconst BoardWriterWrapper = styled(Typography)`\n  display: flex;\n  font-size: 18px;\n  font-weight: bold;\n  font-family: 'Core Sans', serif;\n  color: black;\n  margin-left: 10px;\n  padding-top: 10px;\n`;\n\nconst CreatedAtWrapper = styled(Typography)`\n  display: flex;\n  font-size: 14px;\n  color: gray;\n`;\n\nconst ViewCountWrapper = styled(Typography)`\n  display: flex;\n  font-size: 14px;\n  color: gray;\n  margin-left: 10px;\n`;\n\nconst LikeButtonContainer = styled(Box)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: row;\n  width: 100%;\n  height: 100%;\n`;\n\nconst LikeCountWrapper = styled(Typography)`\n  display: flex;\n  font-size: 18px;\n  font-weight: bold;\n  color: black;\n`;\n\nconst CommentContainer = styled(Paper)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  background-color: white;\n  border-radius: 5px;\n  padding: 10px;\n`;\n\nconst BestCommentTitle = styled(Typography)`\n  display: flex;\n  font-size: 18px;\n  font-weight: bold;\n  font-family: 'Core Sans', serif;\n  background-image: linear-gradient(to left, violet, indigo, blue, green, yellow, orange, red);\n  -webkit-background-clip: text;\n  color: transparent;\n`;\n\nconst deleteEditButtonStyle = {\n  color: 'gray',\n  fontWeight: '400',\n  '&:hover': {\n    color: 'black',\n    transition: 'all 0.3s',\n  },\n};\n\nconst commentButtonStyle = {\n  color: 'gray',\n  fontSize: '12px',\n  justifyContent: 'flex-start',\n  minWidth: '0px',\n  '&:hover': {\n    color: 'black',\n    transition: 'all 0.3s',\n  },\n};\n\nconst BestCommentNoDataWrapper = () => {\n  return (\n    <Box>\n      <Typography fontFamily={'Core Sans'} fontSize={'15px'}>\n        베댓이 존재하지 않습니다.\n      </Typography>\n    </Box>\n  );\n};\n\nconst ChipFontWrapper = styled(Box)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 5px;\n  font-size: 12px;\n  font-weight: bold;\n  color: white;\n`;\n\nconst ChipContainer = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  align-content: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  gap: 10px;\n`;\n\nconst ChipContent = (props: { likeCount: number; commentCount: number }) => {\n  return (\n    <ChipContainer>\n      <ChipFontWrapper>\n        <FavoriteIcon sx={{ fontSize: 12 }} />\n        {props.likeCount}\n      </ChipFontWrapper>\n      <ChipFontWrapper>\n        <FontAwesomeIcon icon={faMessage} />\n        {props.commentCount}\n      </ChipFontWrapper>\n    </ChipContainer>\n  );\n};\n\nexport interface CommentForm {\n  commentContent: string;\n}\n\nconst schema = yup.object().shape({\n  commentContent: yup\n    .string()\n    .required('댓글을 입력해주세요.')\n    .min(2, '댓글을 2자 이상 입력해주세요')\n    .max(1000, '댓글은 1000자 이내로 입력해주세요.'),\n});\n\nconst CommentList = (props: {\n  comment: CommentListDataComments;\n  handleGetBoardComment: (boardId: string) => void;\n  boardId: string;\n  likeResponse: CommentListDataLikeResponses[];\n}) => {\n  const [isReplyOpen, setIsReplyOpen] = useState(false);\n  const { user } = useUser();\n  const commentLikeLog = props.likeResponse.map((comment) => {\n    if (comment.isLike) {\n      return comment.id;\n    }\n  });\n  const [isLiked, setIsLiked] = useState(commentLikeLog.includes(props.comment.id));\n  const [isEditOpen, setIsEditOpen] = useState(false);\n  const [childrenComments, setChildrenComments] = useState<CommentListDataComments[]>([]);\n  const commentContent = props.comment.commentContent.split('\\n').map((line, index) => {\n    return (\n      <Typography\n        sx={{\n          fontSize: '15px',\n          fontFamily: 'Core Sans',\n          textAlign: 'left',\n        }}\n        key={index}\n      >\n        {line}\n        {index !== props.comment.commentContent.split('\\n').length - 1 ? <br /> : null}\n      </Typography>\n    );\n  });\n  const handleCommentLike = (boardId: string, commentId: string) => {\n    if (boardId) {\n      postCommentLike(boardId, commentId)\n        .then((res) => {\n          if (res.status === 200) {\n            setIsLiked(!isLiked);\n            const dom = document.getElementById('comment-like-count-' + commentId);\n            if (dom) {\n              dom.innerText = res.data.toString();\n            }\n          }\n        })\n        .catch((err) => {\n          alert('댓글 좋아요에 실패했습니다.');\n        });\n    }\n  };\n\n  useEffect(() => {\n    handleGetChildrenComment();\n  }, []);\n\n  const handleToggleEdit = useCallback(() => {\n    setIsEditOpen(!isEditOpen);\n  }, [isEditOpen]);\n\n  const handleUpdateComment = (commentId: string, data: CommentForm) => {\n    if (props.boardId && user && user.userId === props.comment.userId) {\n      if (window.confirm('수정하시겠습니까?')) {\n        putBoardComment(commentId, props.boardId, data)\n          .then((res) => {\n            if (res.status === 200) {\n              props.handleGetBoardComment(props.boardId);\n              alert('댓글이 수정되었습니다.');\n              setIsEditOpen(false);\n            }\n          })\n          .catch((err) => {\n            alert('댓글 수정에 실패했습니다.');\n          });\n      }\n    } else {\n      alert('댓글 수정 권한이 없습니다.');\n    }\n  };\n\n  const onValidUpdateComment = (data: CommentForm) => {\n    handleUpdateComment(props.comment.id.toString(), data);\n  };\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<CommentForm>({\n    mode: 'onChange',\n    resolver: yupResolver(schema),\n  });\n\n  const handleDeleteComment = (commentId: string) => {\n    if (props.boardId && window.confirm('댓글을 삭제하시겠습니까?')) {\n      deleteBoardComment(commentId)\n        .then((res) => {\n          if (res.status === 200) {\n            props.handleGetBoardComment(props.boardId);\n            alert('댓글이 삭제되었습니다.');\n            handleGetChildrenComment();\n          }\n        })\n        .catch((err) => {\n          alert('댓글 삭제에 실패했습니다.');\n        });\n    }\n  };\n  const handleToggleOpenReply = useCallback(() => {\n    setIsReplyOpen(!isReplyOpen);\n    if (!isReplyOpen) {\n      handleGetChildrenComment();\n    }\n  }, [isReplyOpen]);\n\n  const handleGetChildrenComment = useCallback(() => {\n    getChildrenComment(props.boardId.toString(), props.comment.id.toString())\n      .then((res) => {\n        if (res.status === 200) {\n          setChildrenComments(res.data);\n        }\n      })\n      .catch((err) => {\n        console.info(err);\n      });\n  }, [isReplyOpen]);\n\n  return (\n    <Box id={'comment-' + props.comment.id} sx={{ paddingTop: '20px', position: 'relative' }}>\n      <Box sx={{ display: 'flex', alignItems: 'center', flexDirection: 'row' }}>\n        <Avatar src={props.comment.userProfileImgUrl} sx={{ width: '25px', height: '25px' }} />\n        <Typography\n          sx={{\n            fontSize: '15px',\n            fontWeight: 'bold',\n            fontFamily: 'Core Sans',\n            marginLeft: '10px',\n          }}\n        >\n          {props.comment.userNickname}\n        </Typography>\n        <Typography\n          sx={{\n            fontSize: '12px',\n            marginLeft: '10px',\n            color: 'gray',\n          }}\n        >\n          {' '}\n          {props.comment.createdAt}\n        </Typography>\n        {user && user.userId === props.comment.userId && (\n          <Box sx={{ display: 'flex', marginLeft: 'auto', alignItems: 'center' }}>\n            <Button sx={commentButtonStyle} onClick={handleToggleEdit}>\n              {isEditOpen ? '취소' : '수정'}\n            </Button>\n            <Button\n              sx={commentButtonStyle}\n              onClick={(e) => {\n                handleDeleteComment(props.comment.id.toString());\n              }}\n            >\n              삭제\n            </Button>\n          </Box>\n        )}\n      </Box>\n      <Box\n        sx={{\n          marginTop: '10px',\n          justifyContent: 'flex-start',\n          alignItems: 'center',\n          width: '100%',\n        }}\n      >\n        {!isEditOpen && commentContent}\n        {isEditOpen && (\n          <Box sx={{ width: '100%' }} component={'form'} onSubmit={handleSubmit(onValidUpdateComment)}>\n            <Paper sx={{ width: '100%', padding: '10px', borderRadius: '10px' }}>\n              <InputBase\n                {...register('commentContent')}\n                multiline\n                defaultValue={props.comment.commentContent}\n                sx={{ width: '100%', fontSize: '15px', fontFamily: 'Core Sans' }}\n              />\n            </Paper>\n            <Box\n              sx={{\n                display: 'flex',\n                alignItems: 'center',\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n                marginTop: '5px',\n                width: '100%',\n              }}\n            >\n              <Typography\n                sx={{\n                  color: 'red',\n                  fontSize: '12px',\n                }}\n              >\n                {errors.commentContent ? errors.commentContent.message : ' '}\n              </Typography>\n              <Button sx={commentButtonStyle} type=\"submit\" style={{ marginRight: 'auto' }}>\n                수정하기\n              </Button>\n              <Box />\n            </Box>\n          </Box>\n        )}\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'flex-start',\n            flexDirection: 'row',\n            marginTop: '5px',\n            width: '100%',\n          }}\n        >\n          <Button sx={commentButtonStyle} onClick={handleToggleOpenReply}>\n            답글 {childrenComments?.length}개\n          </Button>\n          <FormControlLabel\n            sx={{ scale: '0.7', marginLeft: '0px' }}\n            id={'comment-like-' + props.comment.id}\n            control={<Checkbox color={'error'} checkedIcon={<Favorite />} icon={<FavoriteBorder />} />}\n            checked={isLiked}\n            label={\n              <LikeCountWrapper id={'comment-like-count-' + props.comment.id}>\n                {props.comment.commentLikeCount}\n              </LikeCountWrapper>\n            }\n            onClick={(e) => {\n              handleCommentLike(props.boardId, props.comment.id.toString());\n            }}\n          />\n        </Box>\n        <Box id={'comment-reply-' + props.comment.id}></Box>\n        <Grow in={isReplyOpen} mountOnEnter unmountOnExit>\n          <Box>\n            <ReplyInsertForm\n              boardId={props.boardId}\n              handleGetBoardComment={props.handleGetBoardComment}\n              handleGetChildrenComment={handleGetChildrenComment}\n              commentId={props.comment.id.toString()}\n            />\n            <Box>\n              {childrenComments?.map((reply: CommentListDataComments) => {\n                return (\n                  <ReplyList\n                    comment={reply}\n                    handleGetBoardComment={props.handleGetBoardComment}\n                    boardId={props.boardId}\n                    handleDeleteComment={handleDeleteComment}\n                    isLiked={commentLikeLog.includes(reply.id)}\n                    key={reply.id}\n                    handleGetChildrenComment={handleGetChildrenComment}\n                  />\n                );\n              })}\n            </Box>\n          </Box>\n        </Grow>\n      </Box>\n    </Box>\n  );\n};\n\nconst ReplyInsertForm = (props: {\n  boardId: string;\n  handleGetBoardComment: (boardId: string) => void;\n  handleGetChildrenComment: () => void;\n  commentId: string;\n}) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n  } = useForm<CommentForm>({\n    mode: 'onChange',\n    resolver: yupResolver(schema),\n  });\n  const { user } = useUser();\n  const handlePostChildrenComment = (commentId: string, boardId: string, data: CommentForm) => {\n    if (!user) {\n      alert('로그인이 필요합니다.');\n      return;\n    }\n    postChildrenComment(commentId, boardId, data)\n      .then((res) => {\n        if (res.status === 200) {\n          props.handleGetBoardComment(props.boardId);\n          props.handleGetChildrenComment();\n        }\n      })\n      .catch((err) => {\n        console.info(err);\n      });\n  };\n  const handleValidPostChildrenComment = (data: CommentForm) => {\n    handlePostChildrenComment(props.commentId, props.boardId, data);\n    setValue('commentContent', '');\n  };\n\n  return (\n    <form onSubmit={handleSubmit(handleValidPostChildrenComment)} style={{ width: '100%' }}>\n      <CommentContainer>\n        <InputBase\n          sx={{ width: '100%' }}\n          placeholder={user?.userId ? '답글을 입력하세요.' : '로그인이 필요합니다.'}\n          id={'comment-input'}\n          {...register('commentContent')}\n          disabled={!!user}\n        />\n        <IconButton type=\"submit\" disabled={!!user}>\n          <SendIcon />\n        </IconButton>\n      </CommentContainer>\n      <Typography\n        sx={{\n          color: 'red',\n          fontSize: '12px',\n          marginLeft: '10px',\n          textAlign: 'left',\n          marginTop: '5px',\n        }}\n      >\n        {errors.commentContent ? errors.commentContent.message : ' '}\n      </Typography>\n    </form>\n  );\n};\n\nconst ReplyList = (props: {\n  comment: CommentListDataComments;\n  handleGetBoardComment: (boardId: string) => void;\n  boardId: string;\n  handleDeleteComment: (boardId: string) => void;\n  isLiked: boolean;\n  handleGetChildrenComment: () => void;\n}) => {\n  const [isEdit, setIsEdit] = useState(false);\n  const [isLiked, setIsLiked] = useState(props.isLiked);\n  const commentContent = props.comment.commentContent.split('\\n').map((line, index) => {\n    return (\n      <Typography\n        sx={{\n          fontSize: '15px',\n          fontFamily: 'Core Sans',\n          textAlign: 'left',\n        }}\n        key={index}\n      >\n        {line}\n        {index !== props.comment.commentContent.split('\\n').length - 1 ? <br /> : null}\n      </Typography>\n    );\n  });\n\n  const handleCommentLike = (boardId: string, commentId: string) => {\n    if (boardId) {\n      postCommentLike(boardId, commentId)\n        .then((res) => {\n          if (res.status === 200) {\n            setIsLiked(!isLiked);\n            const dom = document.getElementById('comment-like-count-' + commentId);\n            if (dom) {\n              dom.innerText = res.data.toString();\n            }\n          }\n        })\n        .catch((err) => {\n          alert('댓글 좋아요에 실패했습니다.');\n        });\n    }\n  };\n\n  const handleToggleEdit = useCallback(() => {\n    setIsEdit(!isEdit);\n  }, [isEdit]);\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<CommentForm>({\n    mode: 'onChange',\n    resolver: yupResolver(schema),\n  });\n  const { user } = useUser();\n\n  const handleUpdateComment = (commentId: string, data: CommentForm) => {\n    if (props.boardId && user && user.userId === props.comment.userId) {\n      if (window.confirm('수정하시겠습니까?')) {\n        putBoardComment(commentId, props.boardId, data)\n          .then((res) => {\n            if (res.status === 200) {\n              props.handleGetBoardComment(props.boardId);\n              alert('댓글이 수정되었습니다.');\n              setIsEdit(false);\n              props.handleGetChildrenComment();\n            }\n          })\n          .catch((err) => {\n            alert('댓글 수정에 실패했습니다.');\n          });\n      }\n    } else {\n      alert('댓글 수정 권한이 없습니다.');\n    }\n  };\n\n  const onValidUpdateComment = (data: CommentForm) => {\n    handleUpdateComment(props.comment.id.toString(), data);\n  };\n\n  return (\n    <Box id={'comment-' + props.comment.id} sx={{ paddingTop: '20px', paddingLeft: '20px' }}>\n      <Box sx={{ display: 'flex', alignItems: 'center', flexDirection: 'row' }}>\n        <Avatar src={props.comment.userProfileImgUrl} sx={{ width: '25px', height: '25px' }} />\n        <Typography\n          sx={{\n            fontSize: '15px',\n            fontWeight: 'bold',\n            fontFamily: 'Core Sans',\n            marginLeft: '10px',\n          }}\n        >\n          {props.comment.userNickname}\n        </Typography>\n        <Typography\n          sx={{\n            fontSize: '12px',\n            marginLeft: '10px',\n            color: 'gray',\n          }}\n        >\n          {' '}\n          {props.comment.createdAt}\n        </Typography>\n        {user && user.userId === props.comment.userId && (\n          <Box sx={{ display: 'flex', marginLeft: 'auto', alignItems: 'center' }}>\n            <Button sx={commentButtonStyle} onClick={handleToggleEdit}>\n              {isEdit ? '취소' : '수정'}\n            </Button>\n            <Button\n              sx={commentButtonStyle}\n              onClick={(e) => {\n                props.handleDeleteComment(props.comment.id.toString());\n              }}\n            >\n              삭제\n            </Button>\n          </Box>\n        )}\n      </Box>\n      <Box\n        sx={{\n          marginTop: '10px',\n          justifyContent: 'flex-start',\n          alignItems: 'center',\n          width: '100%',\n        }}\n      >\n        {!isEdit && commentContent}\n        {isEdit && (\n          <Box sx={{ width: '100%' }} component={'form'} onSubmit={handleSubmit(onValidUpdateComment)}>\n            <Paper sx={{ width: '100%', padding: '10px', borderRadius: '10px' }}>\n              <InputBase\n                {...register('commentContent')}\n                multiline\n                defaultValue={props.comment.commentContent}\n                sx={{ width: '100%', fontSize: '15px', fontFamily: 'Core Sans' }}\n              />\n            </Paper>\n            <Box\n              sx={{\n                display: 'flex',\n                alignItems: 'center',\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n                marginTop: '5px',\n                width: '100%',\n              }}\n            >\n              <Typography\n                sx={{\n                  color: 'red',\n                  fontSize: '12px',\n                }}\n              >\n                {errors.commentContent ? errors.commentContent.message : ' '}\n              </Typography>\n              <Button sx={commentButtonStyle} type=\"submit\" style={{ marginRight: 'auto' }}>\n                수정하기\n              </Button>\n              <Box />\n            </Box>\n          </Box>\n        )}\n      </Box>\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          flexDirection: 'row',\n          marginTop: '10px',\n        }}\n      >\n        <FormControlLabel\n          sx={{ scale: '0.7' }}\n          id={'comment-like-' + props.comment.id}\n          control={<Checkbox color={'error'} checkedIcon={<Favorite />} icon={<FavoriteBorder />} />}\n          checked={isLiked}\n          label={\n            <LikeCountWrapper id={'comment-like-count-' + props.comment.id}>\n              {props.comment.commentLikeCount}\n            </LikeCountWrapper>\n          }\n          onClick={(e) => {\n            handleCommentLike(props.boardId, props.comment.id.toString());\n          }}\n        />\n      </Box>\n    </Box>\n  );\n};\n\nconst BoardDetail = () => {\n  const dispatch = useAppDispatch();\n  const { boardId } = useParams<{ boardId: string }>();\n  let navigate = useNavigate();\n  const { user } = useUser();\n  const [boardData, setBoardData] = useState<BoardDetailData>({} as BoardDetailData);\n  const boardType = boardData?.article?.boardType ? boardData?.article?.boardType : 'ALL';\n  const [bestArticle, setBestArticle] = useState<ContentFlowProps[]>([]);\n  const [isLiked, setIsLiked] = useState<boolean>(false);\n  const [likeCount, setLikeCount] = useState<number>(0);\n  const [commentData, setCommentData] = useState<CommentListData>({} as CommentListData);\n  const [isCommentLoading, setIsCommentLoading] = useState<boolean>(false);\n  // eslint-disable-next-line\n  const [isCommentError, setIsCommentError] = useState<boolean>(false);\n  const [bestComments, setBestComments] = useState<ContentFlowProps[]>([]);\n  const [isBoardDetailError, setIsBoardDetailError] = useState<boolean>(false);\n  const isLoading = useSelector((state: RootState) => state.app.isLoading);\n\n  const handleSetBestComment = useCallback((commentList: CommentListData) => {\n    const data = [] as ContentFlowProps[];\n    commentList.bestComments.map((comment) => {\n      data.push({\n        id: comment.id,\n        title: comment.commentContent,\n        avatarSrc: comment.userProfileImgUrl,\n        avatarName: comment.userNickname,\n        content: <ChipContent likeCount={comment.commentLikeCount} commentCount={comment.childrenComments?.length} />,\n        link: '',\n      });\n      setBestComments(data);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (boardId) {\n      handleGetBoardDetail(boardId);\n      handleGetBoardComment(boardId);\n    }\n    getBestArticles(BOARD_BEST_ARTICLE_URL + boardType, BOARD_DETAIL_URL, setBestArticle);\n  }, [boardId]);\n  const handleBestArticleNavigate = (articleId: number) => {\n    navigate(BOARD_DETAIL_URL + articleId);\n  };\n  const handleGetBoardDetail = useCallback(\n    (boardId: string) => {\n      dispatch(setIsLoading(true));\n      getBoardDetail(BOARD_DETAIL_URL + boardId)\n        .then((res) => {\n          setBoardData(res.data);\n          setIsBoardDetailError(false);\n          dispatch(setIsLoading(false));\n          handleSetBoardLike(res.data.likeLog, res.data.article.boardLikeCount);\n        })\n        .catch((err) => {\n          dispatch(setIsLoading(false));\n          setIsBoardDetailError(true);\n        });\n    },\n    [boardId],\n  );\n\n  const handleBoardLike = useCallback(() => {\n    if (boardId) {\n      postBoardLike(boardId, setLikeCount);\n      setIsLiked(!isLiked);\n    }\n  }, [boardId, isLiked]);\n\n  const handleSetBoardLike = useCallback((isLiked: boolean, likeCount: number) => {\n    setIsLiked(isLiked);\n    setLikeCount(likeCount);\n  }, []);\n\n  const handleBestCommentNavigate = (id: number) => {\n    //해당 id 를 갖고있는 섹션으로 이동\n    const commentSection = document.getElementById('comment-' + id);\n    if (commentSection) {\n      commentSection.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  const handleGetBoardComment = useCallback((boardId: string) => {\n    setIsCommentLoading(true);\n    getBoardComment(boardId)\n      .then((res) => {\n        setCommentData(res.data);\n        setIsCommentError(false);\n        setIsCommentLoading(false);\n        handleSetBestComment(res.data);\n      })\n      .catch((err) => {\n        setIsCommentError(true);\n        setIsCommentLoading(false);\n      });\n  }, []);\n\n  const handleDeleteBoard = (boardId: string) => {\n    if (window.confirm('게시글을 삭제하시겠습니까?')) {\n      deleteBoard(boardId)\n        .then((res) => {\n          if (res.status === 200) {\n            alert('게시글이 삭제되었습니다.');\n            navigate(-1);\n          }\n        })\n        .catch((err) => {\n          alert('게시글 삭제에 실패했습니다.');\n        });\n    }\n  };\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<CommentForm>({\n    mode: 'onChange',\n    resolver: yupResolver(schema),\n  });\n\n  const handleNavigateToBoardUpdate = () => {\n    if (typeof boardId === 'string') {\n      navigate(BOARD_UPDATE_FORM_ROUTE.replace('{boardId}', boardId).replace('{boardType}', boardType));\n    }\n  };\n\n  const handleNavigateToBoardList = () => {\n    navigate(-1);\n  };\n\n  const handleNavigateToBoardInsert = () => {\n    navigate(BOARD_INSERT_FORM_ROUTE + '?boardType=' + boardType + '&request=add');\n  };\n  const handleCommentSubmit = (data: CommentForm) => {\n    if (user && boardId) {\n      postBoardComment(data, boardId)\n        .then((res) => {\n          if (res.status === 200) {\n            handleGetBoardComment(boardId);\n            setValue('commentContent', '');\n            document.scrollingElement?.scrollTo(0, document.scrollingElement.scrollHeight);\n          }\n        })\n        .catch((err) => {\n          alert('댓글 작성에 실패했습니다.');\n        });\n    }\n  };\n\n  const onInvalid = (errors: any) => {\n    console.info(errors);\n  };\n\n  return (\n    <Container maxWidth={'md'} sx={{ paddingTop: '20px' }}>\n      {!isBoardDetailError && isLoading && <BoardDetailSkeleton />}\n      {!isBoardDetailError && boardData?.article && !isLoading && (\n        <Paper sx={{ padding: '10px 20px 20px 20px' }}>\n          <Box sx={{ paddingBottom: '10px' }}>\n            <BestContent\n              data={bestArticle}\n              flowTitle={<BestArticleTitleComponent />}\n              handleNavigate={handleBestArticleNavigate}\n              chipColor={'default'}\n              noDataWrapper={<BestArticleNoDataWrapper />}\n            />\n          </Box>\n          <BoardDetailContainer>\n            <TagContainer>\n              <Chip\n                label={getBoardType(boardData?.article?.boardType)}\n                size={'small'}\n                color={'primary'}\n                sx={{ fontWeight: 'bold' }}\n              />\n              {boardData?.article?.hashtags?.map((hashtag, index) => (\n                <TagChip key={index} boardType={boardData.article.boardType} tag={hashtag} />\n              ))}\n              {boardData?.article?.character && (\n                <CharacterChip\n                  characterName={boardData.article.character.characterName}\n                  characterImgUrl={boardData.article.character.characterImageUrl}\n                  adventureName={boardData.article.character.adventureName}\n                  serverId={boardData.article.character.serverId}\n                  characterId={boardData.article.character.characterId}\n                />\n              )}\n            </TagContainer>\n            <BoardTitleWrapper>{boardData?.article?.boardTitle}</BoardTitleWrapper>\n            <BoardAuthorContainer>\n              <Avatar src={boardData?.article?.userProfileIconPath} sx={{ width: '20px', height: '20px' }} />\n              <Typography\n                sx={{\n                  fontSize: '13px',\n                  fontWeight: 'bold',\n                  fontFamily: 'Core Sans',\n                }}\n              >\n                {boardData?.article?.userNickname}\n              </Typography>\n            </BoardAuthorContainer>\n            <BoardAuthorContainer>\n              <CreatedAtWrapper>{boardData?.article?.createdAt}</CreatedAtWrapper>\n              <ViewCountWrapper>조회수 {boardData?.article?.boardViewCount}</ViewCountWrapper>\n            </BoardAuthorContainer>\n            <Divider sx={{ marginTop: '10px' }} />\n            <LikeButtonContainer>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    color={'error'}\n                    checkedIcon={<Favorite />}\n                    icon={<FavoriteBorder />}\n                    onClick={handleBoardLike}\n                    checked={isLiked}\n                  />\n                }\n                label={<LikeCountWrapper>{likeCount}</LikeCountWrapper>}\n              />\n              {user && boardData?.article?.userId === user.userId && (\n                <Box sx={{ display: 'flex' }}>\n                  <Button sx={deleteEditButtonStyle} onClick={handleNavigateToBoardUpdate}>\n                    수정\n                  </Button>\n                  <Button\n                    sx={deleteEditButtonStyle}\n                    onClick={(e) => {\n                      handleDeleteBoard(boardData?.article?.id.toString());\n                    }}\n                  >\n                    삭제\n                  </Button>\n                </Box>\n              )}\n            </LikeButtonContainer>\n            <Box sx={{ textAlign: 'left' }}>\n              {boardData?.article?.boardContent && (\n                <div dangerouslySetInnerHTML={{ __html: boardData?.article?.boardContent }} />\n              )}\n            </Box>\n            <Divider sx={{ marginTop: '10px', marginBottom: '10px' }} />\n            <Box sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center', marginLeft: 'auto' }}>\n              <Button sx={{ marginRight: '10px' }} onClick={handleNavigateToBoardList}>\n                <Typography\n                  sx={{ fontSize: '14px', fontWeight: 'bold', fontFamily: 'Core Sans' }}\n                  color={'black'}\n                  component={'span'}\n                >\n                  돌아가기\n                </Typography>\n              </Button>\n              <Button onClick={handleNavigateToBoardInsert}>\n                <Typography\n                  sx={{ fontSize: '14px', fontWeight: 'bold', fontFamily: 'Core Sans' }}\n                  color={'black'}\n                  component={'span'}\n                >\n                  글쓰기\n                </Typography>\n              </Button>\n            </Box>\n            <BestContent\n              data={bestComments}\n              handleNavigate={handleBestCommentNavigate}\n              flowTitle={<BestCommentTitle>베스트</BestCommentTitle>}\n              chipColor={'default'}\n              noDataWrapper={<BestCommentNoDataWrapper />}\n            />\n            <BoardWriterWrapper sx={{ fontSize: '14px', marginLeft: 0, paddingBottom: '10px' }}>\n              댓글 {commentData?.comments?.length}개\n              <CircularProgress\n                size={15}\n                sx={{\n                  display: isCommentLoading ? 'block' : 'none',\n                  marginLeft: '10px',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                }}\n              />\n            </BoardWriterWrapper>\n            <Box>\n              <Box\n                sx={{\n                  display: 'flex',\n                  alignItems: 'center',\n                  flexDirection: 'row',\n                  marginBottom: '10px',\n                }}\n              >\n                <Avatar src={user?.profileImgPath} sx={{ width: '23px', height: '23px' }} />\n                <Typography\n                  sx={{\n                    fontSize: '13px',\n                    fontWeight: 'bold',\n                    fontFamily: 'Core Sans',\n                    marginLeft: '10px',\n                    color: user?.userId ? 'black' : 'gray',\n                  }}\n                >\n                  {user?.nickname ? user.nickname : '게스트'}\n                </Typography>\n              </Box>\n              <form onSubmit={handleSubmit(handleCommentSubmit, onInvalid)} style={{ width: '100%' }}>\n                <CommentContainer>\n                  <InputBase\n                    sx={{ width: '100%' }}\n                    placeholder={user?.userId ? '댓글을 입력하세요.' : '로그인이 필요합니다.'}\n                    {...register('commentContent')}\n                    id={'comment-input'}\n                    disabled={!user}\n                    multiline\n                  />\n                  <IconButton type=\"submit\" disabled={!user}>\n                    <SendIcon />\n                  </IconButton>\n                </CommentContainer>\n              </form>\n              <Typography\n                sx={{\n                  fontSize: '12px',\n                  color: 'red',\n                  textAlign: 'left',\n                  marginTop: '5px',\n                }}\n              >\n                {errors.commentContent?.message}\n              </Typography>\n            </Box>\n            <Box>\n              {commentData?.comments?.map(\n                (comment, index) =>\n                  comment.isParent && (\n                    <CommentList\n                      key={comment.id}\n                      comment={comment}\n                      handleGetBoardComment={handleGetBoardComment}\n                      boardId={boardId ? boardId : '0'}\n                      likeResponse={commentData.likeResponses}\n                    />\n                  ),\n              )}\n            </Box>\n          </BoardDetailContainer>\n        </Paper>\n      )}\n      {isBoardDetailError && <BadRequest />}\n    </Container>\n  );\n};\n\nexport default BoardDetail;\n","/Users/brinc/WebstormProjects/df-off-project/src/pages/Board/SpeedDial/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/pages/Board/Write/index.tsx",["668","669"],["670","671","672","673"],"import {\n  Avatar,\n  Button,\n  Chip,\n  Container,\n  FormControl,\n  Grid,\n  InputLabel,\n  List,\n  ListItemButton,\n  ListItemText,\n  MenuItem,\n  Select,\n  styled,\n  TextField,\n  Zoom,\n} from '@mui/material';\nimport * as React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\nimport { useNavigate } from 'react-router-dom';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport * as yup from 'yup';\nimport { SubmitErrorHandler, useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport '@yaireo/tagify/dist/tagify.css';\nimport { useSelector } from 'react-redux';\nimport { RootState, useAppDispatch } from '../../../redux/store';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExclamationCircle, faXmark } from '@fortawesome/free-solid-svg-icons';\nimport { Content } from '../../../interfaces/CharactersData';\nimport { HighlightOffOutlined } from '@mui/icons-material';\nimport CustomSearchBox from '../../../components/CustomSearchBox';\nimport { HeaderData } from '../../../data/HeaderData';\nimport { getCharactersAutoComplete } from '../../../apis/character/getCharactersAutoComplete';\nimport SearchCharacterModal from '../../../components/SearchCharacterModal';\nimport { ErrorScreen } from '../../../components/ErrorScreen';\nimport { Editor, EditorCore } from '@toast-ui/editor';\nimport { BOARD_DETAIL_URL, BOARD_GET_CHARACTERS_URL } from '../../../apis/data/urls';\nimport { getCharacterList } from '../../../apis/board/getCharacterList';\nimport colorSyntax from '@toast-ui/editor-plugin-color-syntax';\nimport { HookImageResponse, postImage } from '../../../apis/board/postImage';\nimport { postBoard } from '../../../apis/board/postBoard';\nimport { getBoardDetail } from '../../../apis/board/getBoardDetail';\nimport { putBoard } from '../../../apis/board/putBoard';\nimport { removeCharacterHistory, setIsLoading, setLoginModalOpened } from '../../../redux';\nimport { useUser } from '../../../hooks/authHooks/useUser';\n\nconst BoardWriteFormTitleWrapper = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\n\nconst HashtagWrapper = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  padding-top: 20px;\n`;\n\nconst FormFooter = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  padding-top: 20px;\n`;\n\nconst SetCharacterContainer = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  padding-top: 10px;\n`;\n\nconst schema = yup.object().shape({\n  boardTitle: yup\n    .string()\n    .required('제목을 입력해주세요.')\n    .max(50, '제목은 50자 이내로 입력해주세요.')\n    .min(3, '제목은 3자 이상으로 입력해주세요.'),\n  boardContent: yup\n    .string()\n    .required('내용을 입력해주세요.')\n    .max(10000, '내용은 10000자 이내로 입력해주세요.')\n    .min(10, '내용은 10자 이상으로 입력해주세요.'),\n  id: yup.number(),\n  boardType: yup.string().required('게시판 타입을 선택해주세요.'),\n  boardFiles: yup.string().default(''),\n  characterId: yup.string().default(''),\n  serverId: yup.string().default(''),\n  hashtag: yup\n    .array()\n    .of(\n      yup.object().shape({\n        value: yup\n          .string()\n          .max(7, '해시태그는 8자 이내로 입력해주세요.')\n          .min(2, '해시태그는 2자 이상으로 입력해주세요.'),\n        __isValid: yup.boolean().default(false),\n        __tagId: yup.string().default(''),\n      }),\n    )\n    .default([]),\n});\n\nexport interface BoardInsertDataProps {\n  id?: number;\n  boardType: string;\n  boardTitle: string;\n\n  boardContent: string;\n  hashtag: { value: string; __isValid: boolean; __tagId: string }[];\n\n  boardFiles: string;\n  characterId: string;\n\n  serverId: string;\n}\n\nconst FontWrapper = styled(Typography)`\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  gap: 5px;\n  font-size: 12px;\n  font-weight: bold;\n  color: gray;\n`;\n\nconst CharacterDetailContainer = styled(Grid)`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  gap: 5px;\n`;\n\nexport const CharactersListForModal = (props: {\n  data: Content[];\n  handleClick: (characterId: string, serverId: string, characterName: string) => void;\n}) => {\n  return (\n    <List\n      sx={{\n        width: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        marginTop: '20px',\n        maxHeight: '100%',\n        overflowY: 'scroll',\n      }}\n    >\n      {props.data.map((character, index) => {\n        return (\n          <ListItemButton\n            key={index}\n            sx={{ width: '100%', position: 'relative', padding: '10px 15px' }}\n            onClick={(e) => props.handleClick(character.characterId, character.serverId, character.characterName)}\n          >\n            <Avatar\n              sx={{\n                width: '50px',\n                height: '50px',\n                position: 'absolute',\n                left: '3%',\n                backgroundColor: 'white',\n                border: '1px solid lightgray',\n                '& > img': {\n                  height: '400%',\n                  objectFit: 'cover',\n                  objectPosition: 'center',\n                },\n              }}\n              src={character.characterImgPath}\n              variant={'rounded'}\n            />\n            <ListItemText\n              sx={{ paddingLeft: '20%' }}\n              primary={character.characterName}\n              secondary={\n                <CharacterDetailContainer container spacing={1}>\n                  <Grid item xs={3}>\n                    <FontWrapper>{character.serverName}</FontWrapper>\n                  </Grid>\n                  <Grid item xs={3}>\n                    <FontWrapper>{'레벨 ' + character.level}</FontWrapper>\n                  </Grid>\n                  <Grid item xs={5}>\n                    <FontWrapper>{character.jobGrowName}</FontWrapper>\n                  </Grid>\n                </CharacterDetailContainer>\n              }\n            />\n          </ListItemButton>\n        );\n      })}\n    </List>\n  );\n};\n\nconst boardCategory = [\n  {\n    name: '자유',\n    id: 'FREE',\n  },\n  {\n    name: '구인',\n    id: 'RECRUITMENT',\n  },\n  {\n    name: '거래',\n    id: 'MARKET',\n  },\n  {\n    name: '질문/답변',\n    id: 'QUESTION',\n  },\n  {\n    name: '사건/사고',\n    id: 'REPORT',\n  },\n  {\n    name: '공지',\n    id: 'NOTICE',\n  },\n];\n\nconst toolbarItems = [\n  ['heading', 'bold', 'italic', 'strike'],\n  ['hr'],\n  ['ul', 'ol', 'task'],\n  ['table', 'link'],\n  ['image'],\n  ['code'],\n  ['scrollSync'],\n];\n\nconst WriteBoard = () => {\n  //게시글 작성용 state\n  const location = useLocation();\n  let navigate = useNavigate();\n  const searchParams = new URLSearchParams(location.search);\n  // eslint-disable-next-line\n  const [content, setContent] = useState('');\n  const { user } = useUser();\n  const type = searchParams.get('request');\n  const boardTypeParam = searchParams.get('boardType');\n  const [boardType, setBoardType] = useState(boardTypeParam === 'ALL' ? 'FREE' : boardTypeParam);\n  const boardId = searchParams.get('boardId');\n  const dispatch = useAppDispatch();\n  //캐릭터 검색용 state\n  const [characterId, setCharacterId] = useState('');\n  // eslint-disable-next-line\n  const [serverId, setServerId] = useState('');\n  const [characterName, setCharacterName] = useState('');\n  const [characterImgPath, setCharacterImgPath] = useState('');\n  const [boardFiles, setBoardFiles] = useState<string>('');\n  //캐릭터 검색 로직\n  const [characterSearchModalIsOpened, setCharacterSearchModalIsOpened] = useState(false);\n  const handleCloseModal = useCallback(() => {\n    setCharacterSearchModalIsOpened(false);\n  }, []);\n  const handleOpenModal = useCallback(() => {\n    setCharacterSearchModalIsOpened(true);\n  }, []);\n  const [data, setData] = useState<Content[]>([]);\n  const [isCharacterSearchLoading, setIsCharacterSearchLoading] = useState(false);\n\n  const handleNavigateBack = () => {\n    navigate(-1);\n  };\n\n  const handleSetBoardForm = (boardId: string, tuiEditor: EditorCore) => {\n    dispatch(setIsLoading(true));\n    getBoardDetail(BOARD_DETAIL_URL + boardId)\n      .then((res) => {\n        if (res.data.article.userId !== user?.userId) {\n          alert('본인이 작성한 글만 수정할 수 있습니다.');\n          navigate('/');\n        }\n        setValue('boardTitle', res.data.article.boardTitle);\n        setValue('boardContent', res.data.article.boardContent);\n        setValue('hashtag', res.data.article.hashtag);\n        if (res.data.article.character) {\n          setValue('characterId', res.data.article.character.characterId);\n          setValue('serverId', res.data.article.character.serverId);\n          setCharacterId(res.data.article.character.characterId);\n          setServerId(res.data.article.character.serverId);\n          setCharacterName(res.data.article.character.characterName);\n          setCharacterImgPath(\n            `https://img-api.neople.co.kr/df/servers/${res.data.article.character.serverId}/characters/${res.data.article.character.characterId}?zoom=3`,\n          );\n        }\n        setContent(res.data.article.boardContent);\n        tuiEditor.setHTML(res.data.article.boardContent);\n        setValue('id', res.data.article.id);\n        dispatch(setIsLoading(false));\n      })\n      .catch((err) => {\n        alert('게시글을 불러오는데 실패했습니다.');\n        navigate(-1);\n      });\n  };\n\n  const searchHistory = useSelector((state: RootState) => state.history.characterHistory);\n  const handleRemoveSearchOptions = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    const targetId = e.currentTarget.attributes.getNamedItem('data-id')?.value;\n    if (targetId) {\n      dispatch(removeCharacterHistory(targetId));\n    }\n  };\n  const handleSearch = (searchValue: string, selectValue: string) => {\n    getCharacterList(\n      BOARD_GET_CHARACTERS_URL.replace('{serverId}', selectValue).replace('{characterName}', searchValue),\n    )\n      .then((res) => {\n        setData(res.data);\n        setIsCharacterSearchLoading(false);\n      })\n      .catch((err) => {\n        alert('캐릭터 검색에 실패했습니다.');\n        setIsCharacterSearchLoading(false);\n      });\n  };\n  const handleSetCharacterDetails = useCallback((characterId: string, serverId: string, characterName: string) => {\n    if (window.confirm('해당 캐릭터를 등록하시겠습니까?')) {\n      setCharacterId(characterId);\n      setValue('characterId', characterId);\n      setServerId(serverId);\n      setValue('serverId', serverId);\n      setCharacterName(characterName);\n      setCharacterImgPath(`https://img-api.neople.co.kr/df/servers/${serverId}/characters/${characterId}?zoom=3`);\n      setCharacterSearchModalIsOpened(false);\n    }\n  }, []);\n  const handleOptionMouseDown = (event: React.MouseEvent) => {\n    event.preventDefault();\n    const serverId = event.currentTarget.getAttribute('data-option');\n    const characterId = event.currentTarget.getAttribute('data-id');\n    const characterName = event.currentTarget.getAttribute('data-title');\n    console.info(serverId, characterId);\n    if (serverId && characterId && characterName) {\n      handleSetCharacterDetails(characterId, serverId, characterName);\n    }\n  };\n\n  const handleDeleteCharacter = () => {\n    setCharacterId('');\n    setServerId('');\n    setCharacterName('');\n    setCharacterImgPath('');\n    setValue('serverId', '');\n    setValue('characterId', '');\n  };\n\n  //게시글\n  useEffect(() => {\n    if (!user) {\n      alert('로그인이 필요한 서비스입니다.');\n      navigate(-1);\n      dispatch(setLoginModalOpened(true));\n    }\n    const tuieditor = new Editor({\n      el: document.querySelector('#tui-editor-container') as HTMLElement,\n      height: '500px',\n      useCommandShortcut: true,\n      toolbarItems: toolbarItems,\n      previewStyle: 'vertical',\n      plugins: [colorSyntax],\n\n      events: {\n        change: () => {\n          handleEditorChange(tuieditor.getHTML());\n        },\n      },\n      hooks: {\n        addImageBlobHook: async (blob, callback) => {\n          const data = (await postImage(blob)) as HookImageResponse;\n          if (data.url) {\n            callback(data.url, '대체 텍스트');\n            handleAddBoardFile(data.fileId);\n          }\n        },\n      },\n    });\n\n    if (type === 'update') {\n      if (boardId != null) {\n        handleSetBoardForm(boardId, tuieditor);\n      }\n    }\n\n    return () => {\n      tuieditor.destroy();\n    };\n  }, []);\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n  } = useForm<BoardInsertDataProps>({\n    mode: 'onChange',\n    resolver: yupResolver(schema),\n  });\n\n  const handleSelectChange = (event: React.MouseEvent) => {\n    setBoardType(event.currentTarget.getAttribute('data-value') as string);\n    setValue('boardType', event.currentTarget.getAttribute('data-value') as string);\n  };\n  const handleAddBoardFile = (fileId: number) => {\n    setBoardFiles(boardFiles + fileId + ',');\n    setValue('boardFiles', boardFiles);\n  };\n  const handleEditorChange = (value: string) => {\n    setValue('boardContent', value);\n  };\n\n  const handlePost = (data: BoardInsertDataProps) => {\n    if (window.confirm('글을 작성하시겠습니까?')) {\n      postBoard(data, navigate);\n    }\n  };\n  const onInvalid: SubmitErrorHandler<BoardInsertDataProps> = (errors) => {\n    errors && console.info(errors);\n  };\n\n  const handleUpdate = (data: BoardInsertDataProps) => {\n    if (window.confirm('글을 수정하시겠습니까?')) {\n      putBoard(data)\n        .then((res) => {\n          if (res.status === 200) {\n            navigate(`/boards/${boardId}`);\n          }\n        })\n        .catch((err) => {\n          alert(err.data);\n        });\n    }\n  };\n  return (\n    <Container maxWidth={'md'} sx={{ paddingTop: '20px', flexDirection: 'column', gap: '20px' }}>\n      <form onSubmit={type === 'add' ? handleSubmit(handlePost, onInvalid) : handleSubmit(handleUpdate, onInvalid)}>\n        <BoardWriteFormTitleWrapper>\n          <Typography variant={'h4'} sx={{ fontWeight: 'bold' }} fontFamily={'Core Sans'}>\n            {type === 'add' ? '글 작성' : '글 수정'}\n          </Typography>\n          <FormControl sx={{ width: '30%', height: '100%' }} variant={'standard'}>\n            <InputLabel>카테고리</InputLabel>\n            <Select\n              defaultValue={boardType}\n              label=\"카테고리\"\n              {...register('boardType')}\n              id=\"boardTypeSelect\"\n              sx={{\n                fontFamily: 'Core Sans',\n                fontSize: '14px',\n                fontWeight: 'bold',\n              }}\n            >\n              {boardCategory.map((boardType, index) => {\n                return (\n                  <MenuItem\n                    sx={{\n                      fontFamily: 'Core Sans',\n                      fontSize: '14px',\n                      fontWeight: 'bold',\n                    }}\n                    value={boardType.id}\n                    data-value={boardType.id}\n                    key={index}\n                    onClick={handleSelectChange}\n                  >\n                    {boardType.name}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </BoardWriteFormTitleWrapper>\n        <Box\n          sx={{\n            width: '100%',\n            justifyContent: 'center',\n            alignItems: 'center',\n            paddingTop: '20px',\n          }}\n        >\n          <TextField\n            type=\"text\"\n            variant={'outlined'}\n            error={!!errors.boardTitle}\n            helperText={errors.boardTitle?.message}\n            label={'제목'}\n            defaultValue={type === 'update' ? ' ' : ''}\n            {...register('boardTitle')}\n            sx={{\n              width: '100%',\n              height: '100%',\n              fontSize: '20px',\n              fontWeight: 'bold',\n              display: 'flex',\n            }}\n          />\n          <HashtagWrapper>\n            <input type=\"text\" id=\"tagify\" placeholder=\"해시태그를 입력해보세요!\" />\n          </HashtagWrapper>\n          <Typography variant={'body2'} sx={{ color: 'gray', textAlign: 'left' }}>\n            태그는 7자 이하로 5개까지 가능합니다.\n          </Typography>\n        </Box>\n        <Box width={'100%'} height={'90%'} paddingTop={'20px'}>\n          <div id={'tui-editor-container'} />\n          {errors.boardContent?.message && (\n            <Typography variant={'body2'} sx={{ color: 'red', textAlign: 'left' }}>\n              {errors.boardContent?.message}\n            </Typography>\n          )}\n        </Box>\n        <SetCharacterContainer>\n          {!characterId && (\n            <Zoom in={characterId === ''}>\n              <Chip\n                icon={<FontAwesomeIcon icon={faXmark} style={{ padding: '5px' }} />}\n                color={'default'}\n                label={'캐릭터를 링크해보세요!'}\n                size=\"medium\"\n                sx={{ fontWeight: 'bold' }}\n                clickable\n                onClick={handleOpenModal}\n              />\n            </Zoom>\n          )}\n          {characterId && (\n            <Zoom in={characterId !== ''}>\n              <Chip\n                avatar={\n                  <Avatar\n                    src={characterImgPath}\n                    sx={{\n                      '& > img': {\n                        objectFit: 'cover',\n                        objectPosition: 'center',\n                        width: '100%',\n                        height: '400%',\n                      },\n                    }}\n                  />\n                }\n                color={'primary'}\n                label={characterName}\n                size=\"medium\"\n                sx={{ fontWeight: 'bold' }}\n                clickable\n                deleteIcon={<HighlightOffOutlined />}\n                onDelete={handleDeleteCharacter}\n              />\n            </Zoom>\n          )}\n        </SetCharacterContainer>\n        <FormFooter>\n          <Button\n            variant={'contained'}\n            sx={{\n              width: '100px',\n              height: '40px',\n              backgroundColor: '#3f51b5',\n              color: 'white',\n              fontWeight: 'bold',\n            }}\n            type=\"submit\"\n          >\n            {type === 'add' ? '작성' : '수정'}\n          </Button>\n          <Button\n            variant={'contained'}\n            onClick={handleNavigateBack}\n            sx={{\n              width: '100px',\n              height: '40px',\n              backgroundColor: '#3f51b5',\n              color: 'white',\n              fontWeight: 'bold',\n            }}\n          >\n            취소\n          </Button>\n        </FormFooter>\n      </form>\n      <SearchCharacterModal\n        isLoading={isCharacterSearchLoading}\n        isOpened={characterSearchModalIsOpened}\n        handleClose={handleCloseModal}\n        serachBox={\n          <CustomSearchBox\n            placeholder={'캐릭터 검색'}\n            direction={'down'}\n            handleNavigate={handleSearch}\n            filterOptions={HeaderData.serverList}\n            searchHistoryMouseDown={handleOptionMouseDown}\n            removeSearchHistory={handleRemoveSearchOptions}\n            useSearchOption={true}\n            searchHistory={searchHistory}\n            autoCompleteHandler={getCharactersAutoComplete}\n            autoCompleteUrl={'/characters/autoComplete?name={searchValue}&serverId={selectValue}'}\n          />\n        }\n      >\n        {data?.length > 0 && <CharactersListForModal handleClick={handleSetCharacterDetails} data={data} />}\n        {data?.length === 0 && !isCharacterSearchLoading && (\n          <ErrorScreen icon={faExclamationCircle} message={'검색 결과가 없습니다.'} />\n        )}\n      </SearchCharacterModal>\n    </Container>\n  );\n};\n\nexport default WriteBoard;\n","/Users/brinc/WebstormProjects/df-off-project/src/pages/Board/index.tsx",["674"],[],"import CustomTable from '../../components/CustomTable';\nimport { useLocation, useNavigate } from 'react-router';\nimport React, { ReactNode, useCallback, useEffect, useState } from 'react';\nimport { BoardListData } from '../../interfaces/BoardListData';\nimport styled from 'styled-components';\nimport { faExclamationTriangle, faXmark } from '@fortawesome/free-solid-svg-icons';\nimport SpeedDial, { boardSelectOptions } from './SpeedDial';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport InfoIcon from '@mui/icons-material/Info';\n\nimport {\n  Avatar,\n  Button,\n  Chip,\n  Container,\n  IconButton,\n  Link,\n  ListItem,\n  Menu,\n  MenuItem,\n  Pagination,\n  Tooltip,\n} from '@mui/material';\nimport BestContent, { ContentFlowProps } from '../../components/BestContent';\n\nimport StarIcon from '@mui/icons-material/Star';\nimport { getBestArticles } from '../../apis/board/getBestArticles';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport {\n  AllInbox,\n  Announcement,\n  ChatBubbleOutlineOutlined,\n  FavoriteBorderOutlined,\n  FreeBreakfast,\n  LocalMall,\n  QuestionAnswer,\n  RemoveRedEyeOutlined,\n  Work,\n} from '@mui/icons-material';\nimport Loading from 'react-loading';\nimport { ErrorScreen } from '../../components/ErrorScreen';\nimport { BOARD_BEST_ARTICLE_URL, BOARD_DETAIL_URL, BOARD_LIST_URL, BOARD_WRITE_URL } from '../../apis/data/urls';\nimport { getBoardList } from '../../apis/board/getBoardList';\nimport BoardListSkeleton from '../../components/Skeleton/BoardListSkeleton ';\nimport { getBoardCoundByHashtag } from '../../apis/board/getBoardCoundByHashtag';\nimport CustomSearchBox from '../../components/CustomSearchBox';\nimport { getServerName } from '../Characters';\n\nexport function getBoardType(p: string | undefined) {\n  switch (p) {\n    case 'FREE':\n      return '자유게시판';\n    case 'NOTICE':\n      return '공지사항';\n    case 'MARKET':\n      return '거래';\n    case 'QUESTION':\n      return '질문/답변';\n    case 'REPORT':\n      return '사건/사고';\n    case 'RECRUITMENT':\n      return '구인/홍보';\n    case 'ALL':\n      return '전체';\n    default:\n      return '전체';\n  }\n}\n\nexport const BestArticleTitle = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 16px;\n  font-weight: 600;\n  color: #000;\n`;\n\nconst BoardContainer = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst BoardTitleWrapper = styled(Link)`\n  display: inline-block;\n  font-size: 18px;\n  font-weight: 600;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 100%;\n  margin-right: 10px;\n  padding-top: 5px;\n  cursor: pointer;\n  && {\n    color: #121212;\n    text-decoration: none;\n  }\n`;\n\nconst BoardTagContainer = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  width: 100%;\n  gap: 5px;\n`;\n\nconst BoardAuthorWrapper = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  width: 100%;\n  gap: 5px;\n  padding-top: 12px;\n`;\n\nconst BoardCommentContainer = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  justify-content: space-between;\n  gap: 10px;\n  padding-top: 5px;\n`;\n\nconst BoardIconWrapper = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  width: 100%;\n  gap: 5px;\n  font-size: 12px;\n  color: #000;\n`;\n\nconst BoardIconValues = styled(Typography)`\n  && {\n    font-size: 14px;\n    font-weight: bold;\n  }\n`;\n\nconst BoardCreatedAtWrapper = styled(Box)`\n  display: flex;\n  align-items: center;\n  font-size: 12px;\n  color: #000;\n  justify-content: flex-end;\n`;\n\nconst ITEM_HEIGHT = 48;\n\nconst TableTitleWrapper = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  gap: 10px;\n`;\n\nconst TableTitle = styled(Typography)`\n  && {\n    font-size: 24px;\n    font-weight: bold;\n    font-family: 'Core Sans';\n  }\n`;\n\nconst BoardCountWrapper = styled(Typography)`\n  && {\n    font-size: 14px;\n    color: gray;\n    align-self: flex-end;\n    font-family: 'Core Sans';\n  }\n`;\n\nconst HashtagLoading = () => {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '100%',\n        height: '100%',\n        gap: '10px',\n      }}\n    >\n      <Loading type=\"spin\" color=\"white\" height={20} width={20} />\n      <Typography fontFamily={'Core Sans'} fontSize={'15px'}>\n        로딩중...\n      </Typography>\n    </Box>\n  );\n};\n\nexport const BestArticleNoDataWrapper = () => {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '100%',\n        height: '100%',\n        gap: '10px',\n      }}\n    >\n      <Typography fontFamily={'Core Sans'} fontSize={'15px'}>\n        인기 게시글이 없습니다.\n      </Typography>\n    </Box>\n  );\n};\n\nconst CharacterContent = (props: {\n  characterName: string;\n  serverId: string;\n  characterImgUrl: string;\n  adventureName: string;\n  characterId: string;\n}) => {\n  let navigate = useNavigate();\n  const handleNavigateToCharacterDetail = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    navigate(`/details/?characterId=${props.characterId}&serverId=${props.serverId}`);\n  };\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        position: 'relative',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '100%',\n        height: '100%',\n        gap: '2px',\n      }}\n    >\n      <Tooltip title={'클릭하여 캐릭터 상세 정보를 확인하세요.'} placement=\"top\" arrow>\n        <IconButton\n          sx={{ position: 'absolute', top: '-5px', right: '-5px', zIndex: '100', color: 'white' }}\n          onClick={handleNavigateToCharacterDetail}\n        >\n          <InfoIcon />\n        </IconButton>\n      </Tooltip>\n      <Avatar src={props.characterImgUrl} sx={{ width: '100px', height: '100px' }} variant=\"rounded\" />\n      <Typography fontFamily={'Core Sans'} fontSize={'13px'}>\n        {props.characterName}\n      </Typography>\n      <Typography fontFamily={'Core Sans'} fontSize={'12px'}>\n        {props.adventureName}\n      </Typography>\n      <Typography fontFamily={'Core Sans'} fontSize={'12px'}>\n        {getServerName(props.serverId)}\n      </Typography>\n    </Box>\n  );\n};\n\nconst HashtagContent = (props: { count: number }) => {\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '100%',\n        height: '100%',\n        gap: '5px',\n      }}\n    >\n      <Typography fontFamily={'Core Sans'} fontSize={'12px'}>\n        {props.count}개의 게시글이 등록되어있습니다.\n      </Typography>\n      <Typography fontFamily={'Core Sans'} fontSize={'12px'}>\n        해당 게시글을 확인해보세요!\n      </Typography>\n    </Box>\n  );\n};\n\nexport const LongMenu = (props: { menuList: MenuItems[]; boardType: string }) => {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  let navigation = useNavigate();\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = (e: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(null);\n    const type = e.currentTarget.getAttribute('data-type');\n    if (type) {\n      navigation(`/boards/?boardType=${type}`);\n    }\n  };\n\n  return (\n    <Box>\n      <IconButton aria-label=\"more\" id=\"long-button\" onClick={handleClick}>\n        <MoreVertIcon />\n      </IconButton>\n      <Menu\n        MenuListProps={{\n          'aria-labelledby': 'long-button',\n        }}\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        PaperProps={{\n          style: {\n            maxHeight: ITEM_HEIGHT * 4.5,\n            width: '130px',\n          },\n        }}\n      >\n        {props.menuList.map((item) => (\n          <MenuItem\n            key={item.type}\n            selected={props.boardType === item.type}\n            onClick={handleClose}\n            component={'div'}\n            data-type={item.type}\n          >\n            <Typography noWrap fontFamily={'Core Sans'} fontWeight={'bold'}>\n              {item.label}\n            </Typography>\n          </MenuItem>\n        ))}\n      </Menu>\n    </Box>\n  );\n};\n\ninterface MenuItems {\n  type: string;\n  icon: ReactNode;\n  label: string;\n}\n\nexport const getSearchType = (type: string) => {\n  switch (type) {\n    case 'title':\n      return '제목';\n    case 'content':\n      return '내용';\n    case 'hashtag':\n      return '해시태그';\n    case 'characterName':\n      return '캐릭터';\n  }\n};\n\nconst MenuListItem = [\n  { type: 'ALL', icon: <AllInbox />, label: '전체' },\n  { type: 'MARKET', icon: <LocalMall />, label: '거래' },\n  { type: 'QUESTION', icon: <QuestionAnswer />, label: '질문/답변' },\n  { type: 'RECRUITMENT', icon: <Work />, label: '구인/홍보' },\n  { type: 'FREE', icon: <FreeBreakfast />, label: '자유' },\n  { type: 'NOTICE', icon: <Announcement />, label: '공지사항' },\n];\n\nexport const BestArticleTitleComponent = () => {\n  return (\n    <BestArticleTitle>\n      <StarIcon /> <Typography fontFamily={'Core Sans'}>인기글</Typography>\n    </BestArticleTitle>\n  );\n};\n\nexport const CharacterChip = (props: {\n  characterName: string;\n  characterImgUrl: string;\n  adventureName: string;\n  serverId: string;\n  characterId: string;\n}) => {\n  const chipStyle = {\n    fontSize: '10px',\n    '& > img': {\n      objectFit: 'cover',\n      objectPosition: 'center',\n      height: '500%',\n      width: '1300%',\n      backgroundColor: '#c4c4c4',\n    },\n  };\n  return (\n    <Tooltip\n      title={\n        <CharacterContent\n          characterName={props.characterName}\n          serverId={props.serverId}\n          characterId={props.characterId}\n          characterImgUrl={props.characterImgUrl}\n          adventureName={props.adventureName}\n        />\n      }\n      placement=\"top\"\n      arrow\n    >\n      <Chip\n        avatar={<Avatar src={props.characterImgUrl} sx={chipStyle}></Avatar>}\n        label={props.characterName}\n        color=\"default\"\n        sx={{ fontSize: '10px', fontWeight: 'bold' }}\n        size=\"small\"\n        data-name={props.characterName}\n      />\n    </Tooltip>\n  );\n};\n\nexport const TagChip = (props: { boardType: string; tag: string }) => {\n  const navigate = useNavigate();\n  const [hashtagContent, setHashtagContent] = useState<ReactNode>();\n  const [isHashtagLoading, setIsHashtagLoading] = useState<boolean>(false);\n  const hashtagContentStyle = {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n    height: '100%',\n    gap: '5px',\n  };\n  const [hashtagCountArray, setHashtagCountArray] = useState<{ name: string; count: number }[]>([]);\n  const handleGetBoardCountByHashtagName = useCallback(\n    async (e: React.MouseEvent) => {\n      if (isHashtagLoading) {\n        setIsHashtagLoading(false);\n      }\n      const name = e.currentTarget.getAttribute('data-tag');\n      const hashtag = hashtagCountArray.find((item) => item.name === name);\n      if (hashtag) {\n        setIsHashtagLoading(false);\n        setHashtagContent(<HashtagContent count={hashtag.count} />);\n        return;\n      }\n      if (name) {\n        setIsHashtagLoading(true);\n        getBoardCoundByHashtag(name)\n          .then((res) => {\n            if (res.data) {\n              setIsHashtagLoading(false);\n              setHashtagCountArray([...hashtagCountArray, { name, count: res.data }]);\n              setHashtagContent(<HashtagContent count={res.data} />);\n            }\n          })\n          .catch((err) => {\n            setIsHashtagLoading(false);\n            setHashtagContent(\n              <Box sx={hashtagContentStyle}>\n                <Typography fontFamily={'Core Sans'} fontSize={'15px'}>\n                  정보를 불러올 수 없습니다.\n                </Typography>\n              </Box>,\n            );\n          });\n      }\n    },\n    [hashtagCountArray, isHashtagLoading],\n  );\n\n  const handleTagClick = (e: React.MouseEvent<HTMLElement>) => {\n    const keyword = e.currentTarget.getAttribute('data-tag')!;\n    navigate(BOARD_LIST_URL + `?boardType=${props.boardType}&searchType=hashtag&keyword=${keyword}`);\n    e.stopPropagation();\n  };\n\n  return (\n    <Tooltip\n      title={isHashtagLoading ? <HashtagLoading /> : hashtagContent}\n      placement=\"top\"\n      data-tag={props.tag}\n      disableInteractive\n      onMouseOver={handleGetBoardCountByHashtagName}\n    >\n      <Chip\n        label={'#' + props.tag}\n        color=\"default\"\n        clickable={true}\n        sx={{ fontSize: '10px', fontWeight: 'bold' }}\n        size=\"small\"\n        data-tag={props.tag}\n        onClick={handleTagClick}\n      />\n    </Tooltip>\n  );\n};\n\nconst Board = () => {\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  let navigate = useNavigate();\n  const [data, setData] = useState<BoardListData>();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isError, setIsError] = useState<boolean>(false);\n  const searchType = searchParams.get('searchType')?.toString() || '';\n  const keyword = searchParams.get('keyword')?.toString() || '';\n  const boardType = searchParams.get('boardType')?.toString() || 'ALL';\n  const page = searchParams.get('page') ? parseInt(searchParams.get('page') as string) : 0;\n  const handleChangePageByModal = (e: React.ChangeEvent<unknown>, newPage: number) => {\n    navigate(\n      BOARD_LIST_URL + `?boardType=${boardType}&page=${newPage - 1}&searchType=${searchType}&keyword=${keyword}`,\n    );\n  };\n\n  const handleChangePage = (e: React.ChangeEvent<unknown>, newPage: number) => {\n    navigate(\n      BOARD_LIST_URL + `?boardType=${boardType}&page=${newPage - 1}&searchType=${searchType}&keyword=${keyword}`,\n    );\n  };\n  const handleNavigateToSearchResult = (searchType: string, searchKeyword: string) => {\n    navigate(BOARD_LIST_URL + `?searchType=${searchKeyword}&keyword=${searchType}&boardType=${boardType}`);\n  };\n\n  const [bestArticleData, setBestArticleData] = useState<ContentFlowProps[]>([]);\n  const handleTypeTagClick = (e: React.MouseEvent<HTMLElement>) => {\n    const type = e.currentTarget.getAttribute('data-type')!;\n    navigate(BOARD_LIST_URL + `?boardType=${type}`);\n    e.stopPropagation();\n  };\n\n  const handleGetBoardList = (url: string) => {\n    setIsLoading(true);\n    setTimeout(() => {\n      getBoardList(url)\n        .then((res) => {\n          setData(res.data.articles);\n          setIsLoading(false);\n        })\n        .catch((e) => {\n          setIsError(true);\n          setIsLoading(false);\n        });\n    }, 1000);\n  };\n  const handleNavigateToDetail = (e: React.MouseEvent<HTMLElement>) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const id = e.currentTarget.getAttribute('data-id');\n    if (id) {\n      navigate(`/boards/${id}`);\n    }\n  };\n  useEffect(() => {\n    handleGetBoardList(\n      BOARD_LIST_URL + `?boardType=${boardType}&page=${page}&searchType=${searchType}&keyword=${keyword}`,\n    );\n    getBestArticles(BOARD_BEST_ARTICLE_URL + `${boardType}`, BOARD_LIST_URL, setBestArticleData);\n  }, [boardType, page, searchType, keyword]);\n  const handleBestArticleNavigate = (id: number) => {\n    navigate(BOARD_DETAIL_URL + `${id}`);\n  };\n  return (\n    <Container maxWidth=\"md\">\n      <CustomTable\n        title={\n          <TableTitleWrapper>\n            {!keyword && !searchType && <TableTitle>{getBoardType(boardType)}</TableTitle>}\n            {keyword && searchType && (\n              <TableTitle>\n                {getBoardType(boardType)} - {getSearchType(searchType)} : {keyword}\n              </TableTitle>\n            )}\n            <BoardCountWrapper>{data?.totalElements}개의 게시글</BoardCountWrapper>\n          </TableTitleWrapper>\n        }\n        useMenu={false}\n        isLoading={isLoading}\n        useIcon={true}\n        icon={<LongMenu menuList={MenuListItem} boardType={boardType} />}\n      >\n        <Box sx={{ padding: '10px 10px 10px 10px' }}>\n          <BestContent\n            data={bestArticleData}\n            handleNavigate={handleBestArticleNavigate}\n            chipColor={'default'}\n            flowTitle={<BestArticleTitleComponent />}\n            noDataWrapper={<BestArticleNoDataWrapper />}\n          />\n        </Box>\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            padding: '10px 10px 10px 10px',\n            flexDirection: 'row',\n            gap: '10px',\n            borderTop: '1px solid #e0e0e0',\n            borderBottom: '1px solid #e0e0e0',\n            width: '100%',\n            '@media (max-width:1024px)': {\n              display: 'none',\n            },\n          }}\n        >\n          <Box sx={{ width: '60%', height: '40px' }}>\n            <CustomSearchBox\n              placeholder={'검색'}\n              direction={'down'}\n              filterOptions={boardSelectOptions.types}\n              useSearchOption={false}\n              handleNavigate={handleNavigateToSearchResult}\n            />\n          </Box>\n          <Box>\n            <Button\n              sx={{ textAlign: 'right' }}\n              onClick={() => navigate(BOARD_WRITE_URL + `?boardType=${boardType}&request=add`)}\n            >\n              <Typography\n                fontFamily={'Core Sans'}\n                color={'black'}\n                fontWeight={'bold'}\n                component={'span'}\n                fontSize={'15px'}\n              >\n                글쓰기\n              </Typography>\n            </Button>\n          </Box>\n        </Box>\n        {isLoading && <BoardListSkeleton />}\n        {!isLoading &&\n          data?.content?.map((item) => (\n            <ListItem key={item.id} sx={{ width: '100%', border: '0.2px solid #e0e0e0' }} data-id={item.id}>\n              <BoardContainer>\n                <BoardTagContainer>\n                  <Chip\n                    label={getBoardType(item.boardType)}\n                    color=\"info\"\n                    clickable={true}\n                    sx={{ fontSize: '10px', fontWeight: 'bold' }}\n                    size=\"small\"\n                    data-type={item.boardType}\n                    onClick={handleTypeTagClick}\n                  />\n                  {item.hashtags.map((tag, index) => (\n                    <TagChip key={index} boardType={boardType} tag={tag} />\n                  ))}\n                  {item.character && (\n                    <CharacterChip\n                      characterName={item.character.characterName}\n                      characterImgUrl={item.character.characterImageUrl}\n                      adventureName={item.character.adventureName}\n                      serverId={item.character.serverId}\n                      characterId={item.character.characterId}\n                    />\n                  )}\n                </BoardTagContainer>\n                <BoardTitleWrapper onClick={handleNavigateToDetail} data-id={item.id}>\n                  {item.boardTitle}\n                </BoardTitleWrapper>\n                <BoardAuthorWrapper>\n                  <Avatar src={item.userProfileImgUrl} sx={{ width: 24, height: 24, bgcolor: '#c4c4c4' }} />\n                  <Typography\n                    sx={{\n                      fontSize: '14px',\n                      fontWeight: 'bold',\n                      fontFamily: 'Core Sans',\n                    }}\n                  >\n                    {item.userNickname}\n                  </Typography>\n                </BoardAuthorWrapper>\n                <BoardCommentContainer>\n                  <Box style={{ display: 'flex', flexDirection: 'row', gap: '10px' }}>\n                    <BoardIconWrapper>\n                      <FavoriteBorderOutlined sx={{ fontSize: '14px' }} />\n                      <BoardIconValues>{item.boardLikeCount}</BoardIconValues>\n                    </BoardIconWrapper>\n                    <BoardIconWrapper>\n                      <ChatBubbleOutlineOutlined sx={{ fontSize: '14px' }} />\n                      <BoardIconValues>{item.commentCount}</BoardIconValues>\n                    </BoardIconWrapper>\n                    <BoardIconWrapper>\n                      <RemoveRedEyeOutlined sx={{ fontSize: '14px' }} />\n                      <BoardIconValues>{item.boardViewCount}</BoardIconValues>\n                    </BoardIconWrapper>\n                  </Box>\n                  <BoardCreatedAtWrapper>\n                    <Typography sx={{ fontSize: '12px', fontFamily: 'Core Sans' }}>{item.createdAt}</Typography>\n                  </BoardCreatedAtWrapper>\n                </BoardCommentContainer>\n              </BoardContainer>\n            </ListItem>\n          ))}\n        {data?.content?.length === 0 && !isError && <ErrorScreen icon={faXmark} message={'게시글이 없습니다.'} />}\n        {isError && <ErrorScreen icon={faExclamationTriangle} message={'게시글을 불러오는데 실패했습니다.'} />}\n        {data && !isLoading && (\n          <Box\n            sx={{\n              display: 'flex',\n              justifyContent: 'flex-start',\n              alignItems: 'center',\n              padding: '10px 10px 10px 10px',\n              flexDirection: 'row',\n              gap: '10px',\n              borderTop: '1px solid #e0e0e0',\n            }}\n          >\n            <Pagination count={data?.totalPages} page={page + 1} onChange={handleChangePage} />\n          </Box>\n        )}\n        <SpeedDial\n          boardType={boardType}\n          totalPages={data ? data.totalPages : 0}\n          currentPage={data ? data.number : 0}\n          handlePaginationChange={handleChangePageByModal}\n        />\n      </CustomTable>\n    </Container>\n  );\n};\nexport default Board;\n","/Users/brinc/WebstormProjects/df-off-project/src/pages/Characters/Detail/CharacterEquipmentModal/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/pages/Characters/Detail/CharacterProfile/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/pages/Characters/Detail/index.tsx",["675","676","677","678","679","680"],[],"import { useLocation } from 'react-router';\nimport { ReactNode, SyntheticEvent, useCallback, useEffect, useState } from 'react';\nimport { getCharacterDetail } from '../../../apis/character/getCharacterDetail';\nimport { RootState, useAppDispatch } from '../../../redux/store';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLevelUpAlt } from '@fortawesome/free-solid-svg-icons';\nimport { Avatar, Container, Divider, ListItemButton, Paper, Tab, Tabs } from '@mui/material';\nimport { CHARACTER_DETAIL_URL } from '../../../apis/data/urls';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport CharacterDetailSkeleton from '../../../components/Skeleton/CharacterDetailSkeleton';\nimport { useSelector } from 'react-redux';\nimport StarsIcon from '@mui/icons-material/Stars';\nimport CharacterEquipmentModal from './CharacterEquipmentModal';\nimport { BadRequest } from '../../../components/application/error/BadRequest';\nimport {\n  CharacterDetailCharacterAbilityStatus,\n  CharacterDetailCharacterEquipmentDetails,\n  CharacterDetailCharacterEquipmentEquipment,\n  CharacterDetailCharacterEquipmentEquipmentBakalInfo,\n  CharacterDetailCharacterEquipmentEquipmentGrowInfoOptions,\n  CharacterDetailJson,\n} from '../../../interfaces/CharacterDetailJson';\nimport CharacterProfile from './CharacterProfile';\n\nconst typographyProps = {\n  component: 'span',\n  fontFamily: 'Core Sans',\n  fontWeight: '700',\n};\n\ninterface TabPanelProps {\n  children?: ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n      style={{\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n      }}\n    >\n      {value === index && (\n        <Box\n          sx={{\n            marginTop: '20px',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'flex-start',\n            alignItems: 'center',\n            width: '100%',\n            height: '100%',\n          }}\n        >\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst getRarityColor = (rarity: string) => {\n  switch (rarity) {\n    case '에픽':\n      return '#FFB400';\n    case '신화':\n      return '#cc70db';\n    case '유니크':\n      return '#FF00FF';\n    case '레어':\n      return '#B36BFF';\n    case '언커먼':\n      return '#68D5ED';\n    default:\n      return 'gray';\n  }\n};\n\nconst EquipmentGrowInfoDetail = (props: { data: CharacterDetailCharacterEquipmentEquipmentGrowInfoOptions[] }) => {\n  return (\n    <Box>\n      <Typography fontSize={'12px'} color={'#4AA356'}>\n        성장&변환 옵션\n      </Typography>\n      {props.data.map((growInfo, index) => {\n        return (\n          <Box key={index}>\n            <Typography fontSize={'12px'} color={'#C1A437'}>\n              {index + 1}옵션 - Lv{growInfo.level}\n            </Typography>\n            <Typography fontSize={'12px'} color={'#8F8356'}>\n              피해증가 +{growInfo.damage} 버프력 +{growInfo.buff}\n            </Typography>\n            <Typography fontSize={'12px'} color={'#BAB290'} sx={{ whiteSpace: 'pre-wrap' }}>\n              {growInfo.explainDetail}\n            </Typography>\n          </Box>\n        );\n      })}\n    </Box>\n  );\n};\n\nconst EquipmentBaklInfoDetail = (props: { data: CharacterDetailCharacterEquipmentEquipmentBakalInfo }) => {\n  return (\n    <Box>\n      <Typography fontSize={'12px'} color={'#4AA356'}>\n        바칼 융합 옵션\n      </Typography>\n      {props.data.options.map((bakalInfo, index) => {\n        return (\n          <Box key={index}>\n            <Typography fontSize={'12px'} color={'#4AA356'}>\n              {index + 1}옵션\n            </Typography>\n            <Typography fontSize={'12px'} color={'#BAB290'} sx={{ whiteSpace: 'pre-wrap' }}>\n              {bakalInfo.explainDetail}\n            </Typography>\n          </Box>\n        );\n      })}\n    </Box>\n  );\n};\n\nconst CharacterStatDetail = (props: { data: CharacterDetailCharacterAbilityStatus[] }) => {\n  return (\n    <Box>\n      {props.data.map((stat, index) => {\n        return (\n          <Box key={index}>\n            <Typography fontSize={'12px'} color={'#4AA356'}>\n              {stat.name}\n            </Typography>\n            <Typography fontSize={'12px'} color={'#8F8356'}>\n              {stat.value}\n            </Typography>\n          </Box>\n        );\n      })}\n    </Box>\n  );\n};\n\nconst TypeBadge = (props: { type: string }) => {\n  return (\n    <Box\n      id={'type-badge'}\n      sx={{\n        display: 'flex',\n        backgroundColor: '#252525',\n        borderRadius: '5px',\n        padding: '1px 0px',\n        opacity: '0.8',\n        fontSize: '8px',\n        position: 'absolute',\n        top: '0',\n        left: '0',\n        color: 'white',\n      }}\n    >\n      {props.type}\n    </Box>\n  );\n};\n\nconst CharacterEquipmentModalDetail = (props: {\n  detail: CharacterDetailCharacterEquipmentDetails;\n  equipment: CharacterDetailCharacterEquipmentEquipment;\n}) => {\n  const dontNeedList = [\n    '물리 방어력',\n    '마법 방어력',\n    '내구도',\n    '공격속도',\n    '캐스트속도',\n    '이동속도',\n    '인벤토리 무게 한도',\n    'HP MAX',\n    'MP MAX',\n    '적중률',\n    '물리 크리티컬 히트',\n    '마을 이동 속도 증가',\n    '마법 크리티컬 히트',\n    '체력',\n    '모든 속성 저항',\n    '히트리커버리',\n    'MP 1분당 회복',\n    'HP 1분당 회복',\n    '모든 상태변화 내성',\n  ];\n  const dividerStyle = { width: '100%', marginTop: '10px', marginBottom: '10px' };\n  //증가 단어마다 줄바꿈\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'flex-start',\n        alignItems: 'flex-start',\n        width: '100%',\n        height: '100%',\n      }}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'row',\n          width: '100%',\n        }}\n      >\n        <Box\n          sx={{\n            position: 'relative',\n            display: 'flex',\n          }}\n        >\n          <Avatar\n            variant={'rounded'}\n            src={`https://img-api.neople.co.kr/df/items/${props.detail.itemId}`}\n            sx={{ width: '40px', height: '40px' }}\n          />\n          {props.equipment.upgradeInfo && (\n            <img\n              style={{ position: 'absolute', top: 0, left: 0, opacity: '0.7' }}\n              src={'/images/icons/siroco.gif'}\n              width={40}\n              height={40}\n            />\n          )}\n          {props.detail.itemRarity === '신화' && (\n            <img\n              style={{ position: 'absolute', top: 0, left: 0, opacity: '0.7' }}\n              src={'/images/icons/ora_myth.png'}\n              width={40}\n              height={40}\n            />\n          )}\n        </Box>\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'flex-start',\n            alignItems: 'flex-start',\n            width: '100%',\n            height: '100%',\n            marginLeft: '10px',\n          }}\n        >\n          <Typography\n            sx={{\n              fontSize: '15px',\n              fontWeight: 'bold',\n              color: getRarityColor(props.detail.itemRarity),\n              background:\n                props.detail.itemRarity === '신화'\n                  ? '-webkit-linear-gradient(top, rgb(255, 180, 0), rgb(255, 0, 255));'\n                  : '',\n              backgroundClip: props.detail.itemRarity === '신화' ? 'text' : '',\n              textFillColor: props.detail.itemRarity === '신화' ? 'transparent' : '',\n            }}\n          >\n            {props.equipment.reinforce ? '+' + props.equipment.reinforce : ''} {props.detail.itemName}\n          </Typography>\n          {props.equipment.upgradeInfo && (\n            <Typography fontSize={'12px'} color={'#4c9d17'}>\n              <FontAwesomeIcon\n                icon={faLevelUpAlt}\n                fontSize={'small'}\n                style={{ transform: 'rotate(90deg)', paddingRight: '5px' }}\n              />\n              {props.equipment.upgradeInfo.itemName}\n            </Typography>\n          )}\n        </Box>\n      </Box>\n      <Divider sx={dividerStyle} color={'gray'} />\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n          width: '100%',\n        }}\n      >\n        <Typography fontSize={'12px'} color={getRarityColor(props.detail.itemRarity)}>\n          {props.equipment.itemGradeName}\n        </Typography>\n        <Typography fontSize={'12px'} color={getRarityColor(props.detail.itemRarity)}>\n          {props.detail.itemRarity}\n        </Typography>\n      </Box>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          textAlign: 'right',\n          width: '100%',\n        }}\n      >\n        <Typography fontSize={'12px'} color={'#937739'}>\n          레벨제한 {props.detail.itemAvailableLevel}\n        </Typography>\n        <Typography fontSize={'12px'} color={'#c1a437'}>\n          {props.detail.itemTypeDetail}\n        </Typography>\n      </Box>\n      <Divider sx={dividerStyle} color={'gray'} />\n      <Box>\n        {props.equipment.reinforce !== 0 && (\n          <Typography fontSize={'12px'} color={getRarityColor('언커먼')}>\n            +{props.equipment.reinforce} 강화\n          </Typography>\n        )}\n      </Box>\n      <Box>\n        {props.detail.itemStatus &&\n          props.detail.itemStatus.map((status, index) => {\n            return (\n              dontNeedList.filter((name: string) => name === status.name).length === 0 && (\n                <Typography key={index} fontSize={'12px'} color={'#8F8356'}>\n                  {status.name} {status.value}\n                </Typography>\n              )\n            );\n          })}\n      </Box>\n      {props.equipment.enchant && props.equipment.enchant.status !== null && (\n        <Divider sx={dividerStyle} color={'gray'} />\n      )}\n      <Box>\n        {props.equipment.enchant &&\n          props.equipment.enchant.status !== null &&\n          props.equipment.enchant.status.map((enchant, index) => {\n            return (\n              <Typography key={index} fontSize={'12px'} color={'#84F0A8'}>\n                {enchant.name} +{enchant.value}\n              </Typography>\n            );\n          })}\n      </Box>\n      {props.detail.itemExplainDetail && <Divider sx={dividerStyle} color={'gray'} />}\n      <Box>\n        <Typography fontSize={'12px'} sx={{ whiteSpace: 'pre-wrap' }} color={'#8F8356'}>\n          {props.detail.itemExplainDetail}\n        </Typography>\n      </Box>\n      {props.equipment.bakalInfo && <Divider sx={dividerStyle} color={'gray'} />}\n      {props.equipment.bakalInfo && <EquipmentBaklInfoDetail data={props.equipment.bakalInfo} />}\n      {props.equipment.growInfo && <Divider sx={dividerStyle} color={'gray'} />}\n      {props.equipment.growInfo && <EquipmentGrowInfoDetail data={props.equipment.growInfo.options} />}\n    </Box>\n  );\n};\n\nconst CharacterEquipmentDetail = (props: {\n  equipment: CharacterDetailCharacterEquipmentEquipment;\n  detail: CharacterDetailCharacterEquipmentDetails | undefined;\n}) => {\n  const [isModalOpened, setIsModalOpened] = useState<boolean>(false);\n  const handleModalOpen = useCallback(() => {\n    setIsModalOpened(true);\n  }, []);\n  const handleModalClose = useCallback(() => {\n    setIsModalOpened(false);\n  }, []);\n  return (\n    <ListItemButton\n      sx={{\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'flex-start',\n        width: '100%',\n        height: '100%',\n        padding: '10px',\n        gap: '10px',\n      }}\n      onClick={handleModalOpen}\n    >\n      <CharacterEquipmentModal isOpened={isModalOpened} setIsOpened={handleModalClose}>\n        {props.detail && <CharacterEquipmentModalDetail detail={props.detail} equipment={props.equipment} />}\n      </CharacterEquipmentModal>\n\n      <Box\n        sx={{\n          position: 'relative',\n          display: 'flex',\n          width: '40px',\n          height: '40px',\n        }}\n      >\n        <Avatar\n          variant={'rounded'}\n          src={`https://img-api.neople.co.kr/df/items/${props.equipment.itemId}`}\n          sx={{ width: '40px', height: '40px' }}\n        />\n        <TypeBadge type={props.equipment.slotName} />\n        {props.equipment.upgradeInfo && (\n          <img\n            style={{ position: 'absolute', top: 0, left: 0, opacity: '0.7' }}\n            src={'/images/icons/siroco.gif'}\n            width={40}\n            height={40}\n          />\n        )}\n        {props.equipment.itemRarity === '신화' && (\n          <img\n            style={{ position: 'absolute', top: 0, left: 0, opacity: '0.7' }}\n            src={'/images/icons/ora_myth.png'}\n            width={40}\n            height={40}\n          />\n        )}\n      </Box>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'flex-start',\n          alignItems: 'flex-start',\n          width: '100%',\n          height: '100%',\n        }}\n      >\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            width: '100%',\n            //줄바꿈 되지 않도록\n          }}\n        >\n          <Typography\n            sx={{\n              fontSize: '15px',\n              fontWeight: 'bold',\n              color: getRarityColor(props.equipment.itemRarity),\n              background:\n                props.equipment.itemRarity === '신화'\n                  ? '-webkit-linear-gradient(top, rgb(255, 180, 0), rgb(255, 0, 255));'\n                  : '',\n              backgroundClip: props.equipment.itemRarity === '신화' ? 'text' : '',\n              textFillColor: props.equipment.itemRarity === '신화' ? 'transparent' : '',\n            }}\n          >\n            {props.equipment.itemName}\n          </Typography>\n          {props.equipment.reinforce !== 0 && (\n            <Typography\n              sx={{\n                fontSize: '12px',\n                fontWeight: 'bold',\n                color: props.equipment.amplificationName ? getRarityColor('유니크') : getRarityColor('언커먼'),\n              }}\n            >\n              {' '}\n              +{props.equipment.reinforce}\n              {props.equipment.amplificationName ? '증폭' : '강화'}{' '}\n              {props.equipment.refine !== 0 ? `(${props.equipment.refine})` : ''}\n            </Typography>\n          )}\n        </Box>\n        {props.equipment.upgradeInfo && (\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'row',\n            }}\n          >\n            <Typography fontSize={'12px'} color={'#4c9d17'}>\n              <FontAwesomeIcon\n                icon={faLevelUpAlt}\n                fontSize={'small'}\n                style={{ transform: 'rotate(90deg)', marginRight: '5px' }}\n              />\n              {props.equipment.upgradeInfo.itemName}\n            </Typography>\n          </Box>\n        )}\n        <Box\n          sx={{\n            display: 'inline-flex',\n            flexDirection: 'row',\n            justifyContent: 'flex-start',\n            alignItems: 'flex-start',\n            gap: '5px',\n          }}\n        >\n          {props.equipment.enchant &&\n            props.equipment.enchant.status !== null &&\n            props.equipment.enchant.status.map((status, index) => {\n              return (\n                <Typography\n                  key={index}\n                  sx={{\n                    fontSize: '11px',\n                    display: 'flex',\n                  }}\n                >\n                  {status.name} +{status.value}\n                </Typography>\n              );\n            })}\n        </Box>\n        {props.equipment.growInfo && (\n          <Box\n            sx={{\n              display: 'inline-flex',\n              flexDirection: 'row',\n              justifyContent: 'flex-start',\n              alignItems: 'center',\n              gap: '5px',\n              backgroundColor: '#f5f5f5',\n              padding: '1px 3px',\n            }}\n          >\n            <StarsIcon\n              sx={{\n                fontSize: '10px',\n                color: '#FFB400',\n              }}\n            />\n            {props.equipment?.growInfo?.options?.map((option, index) => {\n              return (\n                <Typography\n                  key={index}\n                  sx={{\n                    fontSize: '11px',\n                    display: 'flex',\n                  }}\n                >\n                  {' '}\n                  {option.level}\n                  {index + 1 !== props.equipment.growInfo.options.length && ' ·'}\n                </Typography>\n              );\n            })}\n            <Typography\n              sx={{\n                fontSize: '11px',\n                display: 'flex',\n                fontWeight: 'bold',\n              }}\n            >\n              {' '}\n              ({props.equipment.growInfo?.total?.level})\n            </Typography>\n          </Box>\n        )}\n      </Box>\n    </ListItemButton>\n  );\n};\n\nconst CharacterDetail = () => {\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const characterId = searchParams.get('characterId');\n  const serverId = searchParams.get('serverId');\n  const [data, setData] = useState<CharacterDetailJson>({} as CharacterDetailJson);\n  const dispatch = useAppDispatch();\n  const [selectedTab, setSelectedTab] = useState(0);\n  const isLoading = useSelector((state: RootState) => state.app.isLoading);\n  const [isError, setIsError] = useState<boolean>(false);\n  const handleChange = useCallback((event: SyntheticEvent, newValue: number) => {\n    setSelectedTab(newValue);\n  }, []);\n  useEffect(() => {\n    if (characterId && serverId) {\n      dispatch(\n        getCharacterDetail(\n          CHARACTER_DETAIL_URL + `?characterId=${characterId ? characterId : ''}&serverId=${serverId ? serverId : ''}`,\n          setData,\n          setIsError,\n        ),\n      );\n    }\n  }, [characterId, serverId]);\n  const handleRefresh = useCallback(() => {\n    if (characterId && serverId) {\n      dispatch(\n        getCharacterDetail(\n          CHARACTER_DETAIL_URL + `?characterId=${characterId ? characterId : ''}&serverId=${serverId ? serverId : ''}`,\n          setData,\n          setIsError,\n        ),\n      );\n    }\n  }, [characterId, serverId]);\n  return (\n    <Container\n      maxWidth={'md'}\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        position: 'relative' as 'relative',\n        justifyContent: 'flex-start',\n        alignItems: 'flex-start',\n        width: '100%',\n        height: '100%',\n        padding: '20px 10px',\n      }}\n    >\n      {isLoading && <CharacterDetailSkeleton />}\n      {!isLoading && !isError && <CharacterProfile handleRefresh={handleRefresh} data={data} />}\n      {isError && <BadRequest />}\n      {!isError && (\n        <Paper\n          elevation={3}\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'flex-start',\n            alignItems: 'center',\n            position: 'relative' as 'relative',\n            width: '100%',\n            height: '100%',\n            borderRadius: '10px',\n            padding: '10px',\n            marginTop: '20px',\n          }}\n        >\n          <Box sx={{ borderBottom: 1, borderColor: 'divider', width: '100%', display: 'flex' }}>\n            <Tabs\n              value={selectedTab}\n              onChange={handleChange}\n              aria-label=\"character detail tab\"\n              variant=\"scrollable\"\n              scrollButtons\n            >\n              <Tab label=\"장비\" sx={typographyProps} />\n              <Tab label=\"스탯\" sx={typographyProps} />\n              <Tab label=\"버프 강화\" sx={typographyProps} />\n              <Tab label=\"아바타\" sx={typographyProps} />\n              <Tab label=\"스킬\" sx={typographyProps} />\n              <Tab label=\"gdgd\" sx={typographyProps} />\n              <Tab label=\"버프 강화\" sx={typographyProps} />\n            </Tabs>\n          </Box>\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'flex-start',\n              alignItems: 'center',\n              width: '100%',\n              height: '100%',\n              padding: '0px 0px',\n            }}\n          >\n            <TabPanel index={0} value={selectedTab}>\n              {data?.characterEquipment?.equipment?.map((equipment, index) => {\n                return (\n                  <CharacterEquipmentDetail\n                    equipment={equipment}\n                    detail={data?.characterEquipmentDetails?.find((o) => {\n                      return o.itemId === equipment.itemId;\n                    })}\n                    key={index}\n                  />\n                );\n              })}\n            </TabPanel>\n            <TabPanel index={1} value={selectedTab}>\n              {data.characterAbility && data.characterAbility.status && (\n                <CharacterStatDetail data={data.characterAbility.status} />\n              )}\n            </TabPanel>\n          </Box>\n        </Paper>\n      )}\n    </Container>\n  );\n};\n\nexport default CharacterDetail;\n","/Users/brinc/WebstormProjects/df-off-project/src/pages/Characters/index.tsx",["681"],[],"import { useLocation, useParams } from 'react-router';\nimport React, { useEffect, useState } from 'react';\nimport { getCharacters } from '../../apis/character/getCharacters';\nimport { CharactersData } from '../../interfaces/CharactersData';\nimport styled from 'styled-components';\nimport { useNavigate } from 'react-router-dom';\nimport { useAppDispatch } from '../../redux/store';\nimport { Container, Pagination } from '@mui/material';\nimport { CHARACTER_SEARCH_URL } from '../../apis/data/urls';\nimport CharacterList from '../../components/CharactersList';\n\nconst ResultTitleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: row;\n  background-color: white;\n  border-radius: 10px;\n  align-items: center;\n  width: 100%;\n  height: 20%;\n  font-size: 21px;\n  font-weight: 600;\n  color: #000;\n  text-align: center;\n  padding: 5px;\n  margin-bottom: 20px;\n  box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.1);\n  grid-column: 1 / 5;\n  @media (max-width: 768px) {\n    grid-column: 1 / 3;\n  }\n  @media (max-width: 425px) {\n    grid-column: 1 / 3;\n  }\n  @media (max-width: 320px) {\n    grid-column: 1 / 3;\n  }\n`;\nexport const getServerName = (serverId: string) => {\n  switch (serverId) {\n    case 'all':\n      return '전체';\n    case 'bakal':\n      return '바칼';\n    case 'hilder':\n      return '힐더';\n    case 'prey':\n      return '프레이';\n    case 'anton':\n      return '안톤';\n    case 'kasillas':\n      return '카시야스';\n    case 'adventure':\n      return '모험단';\n    case 'diregie':\n      return '디레지에';\n    case 'siroco':\n      return '시로코';\n    case 'cain':\n      return '카인';\n  }\n};\n\nconst ResultServerNameWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #ca955c;\n  font-size: 18px;\n  font-weight: 600;\n  padding: 5px;\n  margin: 5px;\n`;\n\nconst ResultCharacterNameWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #282c34;\n  font-size: 22px;\n  font-weight: 600;\n  padding: 5px;\n  margin: 5px;\n`;\n\nconst ResultTitleFooterWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #ca955c;\n  font-size: 18px;\n  font-weight: 600;\n  padding: 5px;\n  margin: 5px;\n`;\n\nconst Characters = () => {\n  let { serverId } = useParams();\n  const [data, setData] = useState<CharactersData>({} as CharactersData);\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const page = searchParams.get('page');\n  const characterName = searchParams.get('name');\n  const navigate = useNavigate();\n  const dispatch = useAppDispatch();\n  const handleChangePage = (e: React.ChangeEvent<unknown>, newPage: number) => {\n    navigate(`/characters/${serverId}?page=${newPage - 1}&name=${characterName ? characterName : ''}`);\n  };\n  const onClickHandler = (e: React.MouseEvent) => {\n    const characterId = e.currentTarget.getAttribute('data-id');\n    const serverId = e.currentTarget.getAttribute('data-server');\n    if (characterId && serverId) {\n      navigate(`/details/?serverId=${serverId}&characterId=${characterId}`);\n    }\n  };\n  useEffect(() => {\n    dispatch(\n      getCharacters(\n        CHARACTER_SEARCH_URL +\n          `?characterName=${characterName ? characterName : ''}&serverId=${serverId ? serverId : ''}&page=${\n            page ? page : '0'\n          }`,\n        setData,\n      ),\n    );\n  }, [characterName, serverId, page]);\n  return (\n    <Container maxWidth={'lg'}>\n      <ResultTitleWrapper>\n        <ResultServerNameWrapper>{getServerName(serverId ? serverId : '')}</ResultServerNameWrapper>\n        <ResultCharacterNameWrapper>{characterName ? characterName : ''}</ResultCharacterNameWrapper>\n        <ResultTitleFooterWrapper>님의 검색결과</ResultTitleFooterWrapper>\n        <Pagination count={data.totalPages} page={data.number + 1} onChange={handleChangePage} color=\"primary\" />\n      </ResultTitleWrapper>\n      {data.content && <CharacterList data={data.content} onClick={onClickHandler} />}\n    </Container>\n  );\n};\n\nexport default Characters;\n","/Users/brinc/WebstormProjects/df-off-project/src/pages/Home/AuthModal/LoginPage.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/pages/Home/AuthModal/ProfileIconChangeModal.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/pages/Home/AuthModal/RegisterPage.tsx",[],["682","683"],"/Users/brinc/WebstormProjects/df-off-project/src/pages/Home/AuthModal/SocialLogin.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/pages/Home/AuthModal/SocialRegister.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/pages/Home/AuthModal/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/pages/Home/Tables/CharacterRanking/index.tsx",["684"],[],"import '../../../../assets/css/rankingTable.scss';\nimport React, { useEffect, useState } from 'react';\nimport { RankingCharacterImg } from '../../../../components/application/character/RankingCharacterImg';\nimport styled from 'styled-components';\nimport mainPageRankingData from '../../../../data/MainPageRankingData';\nimport CustomTable from '../../../../components/CustomTable';\nimport { useNavigate } from 'react-router-dom';\nimport { faChevronRight, faExclamationTriangle, faXmark } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { ErrorScreen } from '../../../../components/ErrorScreen';\nimport IconButton from '@mui/material/IconButton';\nimport axiosClient from '../../../../apis/axiosClient';\n\nconst TableData = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 0px 0;\n  font-size: 16px;\n  color: #000;\n`;\n\nconst TableBody = styled.div`\n  display: grid;\n  grid-template-rows: repeat(1, minmax(100px, auto));\n  grid-template-columns: repeat(2, minmax(100px, 50%));\n  @media (max-width: 768px) {\n    grid-template-rows: repeat(1, minmax(100px, auto));\n    grid-template-columns: repeat(1, minmax(100px, auto));\n  }\n  @media (max-width: 480px) {\n    grid-template-rows: repeat(1, minmax(100px, auto));\n    grid-template-columns: repeat(1, minmax(100px, auto));\n  }\n  @media (min-width: 1024px) {\n    grid-template-rows: repeat(1, minmax(100px, auto));\n    grid-template-columns: repeat(2, minmax(100px, 50%));\n  }\n\n  //first child's empty space remove\n`;\n\nconst TableCell = styled.div`\n  && {\n    display: table-cell;\n    vertical-align: middle;\n    //구분선\n  }\n`;\n\nconst TableRow = styled.div`\n  display: table-row;\n  width: 100%;\n  border-right: 1px solid #e5e5e5;\n  border-bottom: 1px solid #e5e5e5;\n\n  &:hover {\n    background-color: #f5f5f5;\n    cursor: pointer;\n    //랭킹 아이콘 빼고 hover 시 이펙트\n    img {\n      transform: translateY(0px);\n      opacity: 1;\n      transition: all 0.7s ease;\n    }\n\n    #rankIcon {\n      transform: scale(1);\n    }\n\n    p {\n      opacity: 1;\n      transition: all 0.7s ease;\n      background-color: transparent;\n      color: black;\n    }\n\n    span {\n      color: black;\n      transition: all 0.7s ease;\n    }\n  }\n`;\n\nconst RankingDetailValue = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n`;\nconst RankingDetailValueStyled = styled.span`\n  font-size: 15px;\n  @media (max-width: 1024px) {\n    font-size: 14px;\n  }\n  @media (min-width: 1024px) {\n    font-size: 15px;\n  }\n`;\n\nconst RankingValue = (props: { type: string; value: number }) => {\n  return (\n    <RankingDetailValue>\n      {props.type === 'adventureFame' && (\n        <img\n          id=\"rankIcon\"\n          src={require('../../../../assets/img/rankingtable/icon_status_fame.png')}\n          alt=\"icon\"\n          style={{ width: '15px', height: '15px' }}\n        />\n      )}\n      {props.type === 'damageIncrease' && (\n        <img\n          id=\"rankIcon\"\n          src={require('../../../../assets/img/rankingtable/damage_increase.png')}\n          alt=\"icon\"\n          style={{ width: '18px', height: '18px' }}\n        />\n      )}\n      {props.type === 'buffPower' && (\n        <img\n          id=\"rankIcon\"\n          src={require('../../../../assets/img/rankingtable/buff_power.png')}\n          alt=\"icon\"\n          style={{ width: '18px', height: '18px' }}\n        />\n      )}\n      <RankingDetailValueStyled style={{ marginLeft: '5px' }}>{props.value}</RankingDetailValueStyled>\n    </RankingDetailValue>\n  );\n};\n\nconst RankingDetailText = styled.span`\n  color: grey;\n  font-size: 14px;\n  @media (max-width: 1024px) {\n    font-size: 16px;\n  }\n`;\n\nconst RankingDetailNameText = styled.span`\n  font-size: 16px;\n  @media (max-width: 1024px) {\n    font-size: 18px;\n  }\n`;\n\ninterface RankingTableProps {\n  data: any;\n  title: string;\n  url: string;\n}\n\ninterface RankingTableData {\n  modifiedAt: string;\n  characterId: string;\n  characterName: string;\n\n  serverId: string;\n\n  serverName: string;\n\n  jobName: string;\n\n  jobGrowName: string;\n\n  adventureFame: number;\n  adventureName: string;\n\n  imgStyleClassName: string;\n\n  damageIncrease: number;\n\n  buffPower: number;\n  characterImgUrl: string;\n}\n\nconst RankingTableRow = (props: { data: RankingTableData[]; type: string }) => {\n  let navigate = useNavigate();\n  const onClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    const id = e.currentTarget.dataset;\n    navigate(`/details?serverId=${id.server}&characterId=${id.id}`);\n  };\n  return (\n    <>\n      {props.data.length > 0 &&\n        props.data.map((item, index: number) => (\n          <TableRow\n            key={index}\n            id={item.characterId}\n            onClick={onClick}\n            data-id={item.characterId}\n            data-server={item.serverId}\n          >\n            <p className=\"badge bg-black text-gray-700 font-bold text-[13px] absolute bg-black w-5 h-5 text-white opacity-75\">\n              {index + 1}\n            </p>\n            <TableCell style={{ width: '5%' }}>\n              <RankingCharacterImg serverId={item.serverId} characterId={item.characterId} />\n            </TableCell>\n            <TableCell style={{ width: '20%' }}>\n              <TableData>\n                <RankingDetailNameText>{item.characterName}</RankingDetailNameText>\n                <RankingDetailText>{item.adventureName}</RankingDetailText>\n                <RankingDetailText>{item.serverName}</RankingDetailText>\n              </TableData>\n            </TableCell>\n            <TableCell style={{ width: '5%' }}>\n              <TableData>\n                <RankingValue type={props.type} value={item.adventureFame} />\n              </TableData>\n            </TableCell>\n          </TableRow>\n        ))}\n    </>\n  );\n};\n\nfunction CharacterRanking(props: RankingTableProps) {\n  const [isSelected, setIsSelected] = useState('adventureFame');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [data, setData] = useState<RankingTableData[]>([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n      try {\n        const result = await axiosClient.get(props.url + isSelected);\n        setData(result.data.content);\n        setIsLoading(false);\n      } catch (error) {\n        setIsError(true);\n      }\n    };\n    fetchData();\n  }, [isSelected]);\n\n  return (\n    <CustomTable\n      title={props.title}\n      isSelected={isSelected}\n      setIsSelected={setIsSelected}\n      menus={mainPageRankingData.rankingType}\n      useMenu={true}\n      useIcon={true}\n      isLoading={isLoading}\n      icon={\n        <IconButton>\n          <FontAwesomeIcon icon={faChevronRight} size=\"sm\" />\n        </IconButton>\n      }\n    >\n      <TableBody>\n        {data.length > 0 && !isError && <RankingTableRow type={isSelected} data={data} />}\n\n        {data.length === 0 && !isError && <ErrorScreen icon={faXmark} message={'데이터가 없습니다.'} />}\n        {isError && <ErrorScreen icon={faExclamationTriangle} message={'데이터를 불러오는데 실패했습니다.'} />}\n      </TableBody>\n    </CustomTable>\n  );\n}\n\nexport default CharacterRanking;\n","/Users/brinc/WebstormProjects/df-off-project/src/pages/Home/Tables/LatestBoard/index.tsx",["685"],[],"import react from 'react';\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport CustomTable from '../../../../components/CustomTable';\nimport { useNavigate } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronRight, faExclamationTriangle, faXmark } from '@fortawesome/free-solid-svg-icons';\nimport { ErrorScreen } from '../../../../components/ErrorScreen';\nimport { getLatestBoard } from '../../../../apis/board/getLatestBoard';\nimport { Avatar, IconButton, ListItemButton } from '@mui/material';\nimport { ChatBubbleOutlineOutlined, FavoriteBorderOutlined } from '@mui/icons-material';\nimport Typography from '@mui/material/Typography';\nimport { BoardContent } from '../../../../interfaces/BoardListData';\n\nconst BoardBody = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 10px 0;\n  font-size: 14px;\n  color: #000;\n`;\nconst BoardTitle = styled.div`\n  display: block;\n  //맨왼쪽부터\n  font-size: 18px;\n  color: black;\n  width: 100%;\n  overflow: hidden;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  text-align: left;\n`;\n\nconst BoardFooter = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  gap: 20px;\n  font-size: 14px;\n`;\n\nconst LikeCommentWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  padding-top: 5px;\n`;\n\nconst LikeCommentContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n`;\n\nconst NicknameCreatedAtContainer = styled.div`\n  display: grid;\n  justify-content: space-between;\n  align-items: center;\n\n  width: 100%;\n  grid-template-columns: 140px 80px;\n`;\n\nconst ProfileImgWrapper = styled.div`\n  display: flex;\n  border-radius: 50%;\n  overflow: hidden;\n  width: 25px;\n  height: 25px;\n\n  img {\n    width: 100%;\n    height: 100%;\n  }\n`;\nconst IconContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 5px;\n`;\n\nconst NicknameWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 5px;\n`;\n\ninterface BoardProps {\n  title: string;\n  boardTypes?: { name: string; id: string }[];\n  url: string;\n}\n\nconst BoardList = (props: { data: BoardContent[] }) => {\n  let navigate = useNavigate();\n  const onClickHandler = (e: React.MouseEvent<HTMLDivElement>) => {\n    const id = e.currentTarget.dataset.id;\n    navigate(`/boards/${id}`);\n  };\n  return (\n    <>\n      {props.data.map((item, index: number) => (\n        <ListItemButton\n          key={index}\n          onClick={onClickHandler}\n          data-id={item.id}\n          sx={{ display: 'flex', flexDirection: 'column', width: '100%', gap: '6px' }}\n        >\n          <BoardTitle>{item.boardTitle}</BoardTitle>\n          <BoardFooter>\n            <NicknameCreatedAtContainer>\n              <NicknameWrapper>\n                <ProfileImgWrapper>\n                  <Avatar src={item.userProfileImgUrl} alt=\"profile\" style={{ width: '25px', height: '25px' }} />\n                </ProfileImgWrapper>\n                <Typography\n                  sx={{\n                    fontSize: '14px',\n                    fontFamily: 'Core Sans',\n                  }}\n                >\n                  {item.userNickname}\n                </Typography>\n              </NicknameWrapper>\n            </NicknameCreatedAtContainer>\n          </BoardFooter>\n          <LikeCommentContainer>\n            <IconContainer>\n              <LikeCommentWrapper>\n                <Typography>\n                  <FavoriteBorderOutlined\n                    style={{\n                      padding: '0 2px 0 5px',\n                    }}\n                  />{' '}\n                  {item.boardLikeCount}\n                </Typography>\n              </LikeCommentWrapper>\n              <LikeCommentWrapper>\n                <Typography>\n                  <ChatBubbleOutlineOutlined\n                    style={{\n                      padding: '0 2px 0 5px',\n                    }}\n                  />{' '}\n                  {item.commentCount}\n                </Typography>\n              </LikeCommentWrapper>\n            </IconContainer>\n            <Typography sx={{ justifyContent: 'flex-end' }}>{item.createdAt}</Typography>\n          </LikeCommentContainer>\n        </ListItemButton>\n      ))}\n    </>\n  );\n};\n\nconst LatestBoard = (props: BoardProps) => {\n  const [isSelected, setIsSelected] = props.boardTypes ? react.useState('FREE') : react.useState('NOTICE');\n  const [data, setData] = react.useState<[]>([]);\n  const [isLoading, setIsLoading] = react.useState(false);\n  const [isError, setIsError] = react.useState(false);\n  useEffect(() => {\n    getLatestBoard(setIsError, setIsLoading, props.url, isSelected, setData);\n  }, [isSelected]);\n  let navigate = useNavigate();\n\n  return (\n    <CustomTable\n      menus={props.boardTypes}\n      title={props.title}\n      isSelected={isSelected}\n      setIsSelected={setIsSelected}\n      useMenu={true}\n      useIcon={true}\n      isLoading={isLoading}\n      icon={\n        <IconButton onClick={() => navigate('/boards/?boardType=' + isSelected)}>\n          <FontAwesomeIcon icon={faChevronRight} size=\"sm\" />\n        </IconButton>\n      }\n    >\n      <BoardBody>\n        {data?.length > 0 && !isError && <BoardList data={data} />}\n        {data?.length === 0 && !isError && <ErrorScreen icon={faXmark} message={'게시글이 없습니다.'} />}\n        {isError && <ErrorScreen icon={faExclamationTriangle} message={'게시글을 불러오는데 실패했습니다.'} />}\n      </BoardBody>\n    </CustomTable>\n  );\n};\n\nexport default LatestBoard;\n","/Users/brinc/WebstormProjects/df-off-project/src/pages/Home/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/pages/MyPage/Modal/CharacterLink/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/pages/MyPage/Modal/MyActivities/index.tsx",["686","687","688"],[],"import Box from '@mui/material/Box';\nimport * as React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBell, faClock, faComment, faEye, faHeart, faList, IconDefinition } from '@fortawesome/free-solid-svg-icons';\nimport {\n  Avatar,\n  Button,\n  Chip,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n  List,\n  ListItemButton,\n  Menu,\n  MenuItem,\n  Pagination,\n  styled,\n  ToggleButton,\n  ToggleButtonGroup,\n  Tooltip,\n  TooltipProps,\n} from '@mui/material';\nimport { getMyActivities } from '../../../../apis/myPage/getMyActivities';\nimport { BoardActivitiesJson } from '../../../../interfaces/BoardActivitiesJson';\nimport Typography from '@mui/material/Typography';\nimport { useNavigate } from 'react-router-dom';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\nimport { getBoardType } from '../../../Board';\n\ninterface ActivitiesModalProps {\n  activitiesModalOpened: boolean;\n  handleClose: () => void;\n}\n\nconst BoardList = styled(List)`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  width: 100%;\n`;\n\ninterface ITypeMenu {\n  type: string;\n  setType: (type: string) => void;\n  label: string;\n  icon: IconProp;\n}\n\nconst SquareChip = styled(Chip)`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  height: 1rem;\n  font-size: 10px;\n  font-weight: 700;\n  border-radius: 5px;\n  padding-left: 0;\n  padding-right: 0;\n`;\n\nconst TitleHeader = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n  gap: 5px;\n`;\n\nexport const ActivitiesModalBoardTemplate = (props: { data: BoardActivitiesJson }) => {\n  const navigate = useNavigate();\n  const handleNavigateToBoard = useCallback((boardId: number) => {\n    navigate(`/boards/${boardId}`);\n  }, []);\n  return (\n    <BoardList>\n      {props.data.content.map((item, index) => {\n        return (\n          <ListItemButton key={index} onClick={() => handleNavigateToBoard(item.id)}>\n            <Box\n              sx={{\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'flex-start',\n              }}\n            >\n              <TitleHeader>\n                <SquareChip label={getBoardType(item.boardType)} size={'small'} color={'primary'} />\n                {item.character && (\n                  <SquareChip\n                    avatar={\n                      <Avatar\n                        src={item.character.characterImageUrl}\n                        sx={{\n                          backgroundColor: 'white',\n                        }}\n                      />\n                    }\n                    label={item.character.characterName}\n                    sx={{\n                      '& .MuiChip-avatar': {\n                        width: '0.7rem',\n                        height: '0.7rem',\n                        '> img': {\n                          scale: '3',\n                        },\n                      },\n                    }}\n                    size={'small'}\n                  />\n                )}\n                <SquareChip\n                  icon={\n                    <FontAwesomeIcon icon={faHeart} style={{ width: '0.7rem', height: '0.7rem', paddingLeft: '3px' }} />\n                  }\n                  variant={'outlined'}\n                  label={item.boardLikeCount}\n                  size={'small'}\n                />\n                <SquareChip\n                  icon={\n                    <FontAwesomeIcon\n                      icon={faComment}\n                      style={{ width: '0.7rem', height: '0.7rem', paddingLeft: '3px' }}\n                    />\n                  }\n                  variant={'outlined'}\n                  label={item.commentCount}\n                  size={'small'}\n                />\n                <SquareChip\n                  label={item.createdAt}\n                  sx={{\n                    paddingLeft: 0,\n                    paddingRight: 0,\n                  }}\n                  variant={'outlined'}\n                  size={'small'}\n                />\n              </TitleHeader>\n              <Typography\n                component=\"span\"\n                fontFamily={'Core Sans'}\n                fontSize={14}\n                fontWeight={400}\n                color={'#000'}\n                display={'inline-block'}\n                whiteSpace={'nowrap'}\n                textOverflow={'ellipsis'}\n                overflow={'hidden'}\n                width={'380px'}\n              >\n                {item.boardTitle}\n              </Typography>\n            </Box>\n          </ListItemButton>\n        );\n      })}\n    </BoardList>\n  );\n};\n\ninterface IToggleButtonGroup {\n  value: string;\n  icon: IconDefinition;\n  tooltipTitle: string;\n  tooltipPlacement: TooltipProps['placement'];\n}\n\nconst ToggleButtonGroupComponent = (props: {\n  sortBy: string;\n  handleChangeSortBy: (\n    event: React.MouseEvent<HTMLElement>,\n    newAlignment: '' | 'like' | 'commentCount' | 'view',\n  ) => void;\n  groups: IToggleButtonGroup[];\n}) => {\n  return (\n    <ToggleButtonGroup size=\"small\" value={props.sortBy} exclusive onChange={props.handleChangeSortBy}>\n      // TODO : disable 됐을 때 툴팁 안 뜨도록\n      {props.groups.map((group, index) => {\n        return (\n          <Tooltip title={group.tooltipTitle} placement={group.tooltipPlacement} key={index}>\n            <ToggleButton value={group.value} selected={props.sortBy === group.value}>\n              <FontAwesomeIcon icon={group.icon} />\n            </ToggleButton>\n          </Tooltip>\n        );\n      })}\n    </ToggleButtonGroup>\n  );\n};\n\nconst MenuButton = (props: { handleChange: (value: string) => void; menuList: ITypeMenu[]; isSelected: string }) => {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = (e: React.MouseEvent) => {\n    const type = e.currentTarget.attributes.getNamedItem('data-type')?.value;\n    if (type) {\n      props.handleChange(type);\n    }\n    setAnchorEl(null);\n  };\n\n  return (\n    <div>\n      <IconButton\n        aria-label=\"more\"\n        id=\"long-button\"\n        aria-controls={open ? 'long-menu' : undefined}\n        aria-expanded={open ? 'true' : undefined}\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n      >\n        <MoreVertIcon />\n      </IconButton>\n      <Menu\n        id=\"menu-list\"\n        MenuListProps={{\n          'aria-labelledby': 'long-button',\n        }}\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        PaperProps={{\n          style: {\n            maxHeight: 48 * 4.5,\n            width: '10ch',\n          },\n        }}\n      >\n        {props.menuList.map((menu, index) => (\n          <MenuItem key={index} selected={menu.type === props.isSelected} data-type={menu.type} onClick={handleClose}>\n            <Typography fontFamily={'Core Sans'} fontSize={13} fontWeight={700}>\n              {menu.label}\n            </Typography>\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nconst StyledDialogTitle = styled(DialogTitle)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  border-bottom: 1px solid #e0e0e0;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.25);\n`;\n\nconst StyledDialogContent = styled(DialogContent)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  padding: 0;\n`;\n\nconst StyledDialogActions = styled(DialogActions)`\n  display: flex;\n  border-top: 0px solid #e0e0e0;\n  box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.25);\n`;\n\nconst StyledDialogTitleMenuBox = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n`;\n\nconst PaginationToggleGroupBox = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n`;\n\nfunction MyActivitiesModal(props: ActivitiesModalProps) {\n  const [category, setCategory] = useState<'board' | 'comment' | 'notification'>('board');\n  const [sortBy, setSortBy] = useState<'commentCount' | 'like' | 'view' | ''>('');\n  const [page, setPage] = useState<number>(0);\n  const [boardActivities, setBoardActivities] = useState<BoardActivitiesJson>({} as BoardActivitiesJson);\n\n  const categories = [\n    {\n      type: 'postSignUp',\n      setType: setCategory,\n      label: '게시글',\n      icon: faList,\n    },\n    {\n      type: 'comment',\n      setType: setCategory,\n      label: '댓글',\n      icon: faComment,\n    },\n    {\n      type: 'notification',\n      setType: setCategory,\n      label: '알림',\n      icon: faBell,\n    },\n  ] as ITypeMenu[];\n\n  const handleChangeCategory = (type: string) => {\n    setCategory(type as 'board' | 'comment' | 'notification');\n    setPage(0);\n  };\n\n  const handleChangeSortBy = useCallback(\n    (event: React.MouseEvent<HTMLElement, MouseEvent>, value: '' | 'view' | 'like' | 'commentCount') => {\n      setSortBy(value);\n      setPage(0);\n    },\n    [sortBy],\n  );\n  useEffect(() => {\n    getMyActivities(category, sortBy, page).then((res) => {\n      switch (category) {\n        case 'board':\n          setBoardActivities(res.data);\n          break;\n        default:\n          break;\n      }\n    });\n  }, [category, sortBy, page]);\n\n  const boardToggleButtonGroups: IToggleButtonGroup[] = [\n    {\n      value: '',\n      icon: faClock,\n      tooltipTitle: '최신순',\n      tooltipPlacement: 'top',\n    },\n    {\n      value: 'view',\n      icon: faEye,\n      tooltipTitle: '조회순',\n      tooltipPlacement: 'top',\n    },\n    {\n      value: 'like',\n      icon: faHeart,\n      tooltipTitle: '좋아요순',\n      tooltipPlacement: 'top',\n    },\n    {\n      value: 'commentCount',\n      icon: faComment,\n      tooltipTitle: '댓글순',\n      tooltipPlacement: 'top',\n    },\n  ];\n\n  return (\n    <Dialog\n      sx={{\n        '& .MuiDialog-paper': {\n          width: '400px',\n          height: '550px',\n          display: 'flex',\n        },\n      }}\n      open={props.activitiesModalOpened}\n      onClose={props.handleClose}\n    >\n      <StyledDialogTitle>\n        <Typography component=\"span\" sx={{ fontSize: 18, fontWeight: 700, color: '#000' }} fontFamily=\"Core Sans\">\n          활동 내역\n        </Typography>\n        <StyledDialogTitleMenuBox>\n          <MenuButton handleChange={handleChangeCategory} isSelected={category} menuList={categories} />\n          <Button>닫기</Button>\n        </StyledDialogTitleMenuBox>\n      </StyledDialogTitle>\n      <StyledDialogContent>\n        {category === 'board' && boardActivities.content && <ActivitiesModalBoardTemplate data={boardActivities} />}\n      </StyledDialogContent>\n      <StyledDialogActions>\n        {category === 'board' && (\n          <PaginationToggleGroupBox>\n            <ToggleButtonGroupComponent\n              sortBy={sortBy}\n              handleChangeSortBy={handleChangeSortBy}\n              groups={boardToggleButtonGroups}\n            />\n            <Pagination\n              count={boardActivities.totalPages}\n              page={page + 1}\n              onChange={(e, page) => {\n                setPage(page - 1);\n              }}\n            />\n          </PaginationToggleGroupBox>\n        )}\n      </StyledDialogActions>\n    </Dialog>\n  );\n}\n\nexport default MyActivitiesModal;\n","/Users/brinc/WebstormProjects/df-off-project/src/pages/MyPage/Modal/UserDetailEdit/NicknameEdit/index.tsx",[],["689"],"/Users/brinc/WebstormProjects/df-off-project/src/pages/MyPage/Modal/UserDetailEdit/PasswordEdit/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/pages/MyPage/Modal/UserDetailEdit/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/pages/MyPage/ProfileMenus/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/pages/MyPage/UserCharacters/index.tsx",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/pages/MyPage/index.tsx",["690"],[],"import { Avatar, Box, Card, Container, Divider, styled } from '@mui/material';\nimport { BadRequest } from '../../components/application/error/BadRequest';\nimport Typography from '@mui/material/Typography';\nimport * as React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { MyPageResponse } from '../../interfaces/MyPageResponse';\nimport getMyPageResponse from '../../apis/myPage/getMyPageResponse';\nimport ProfileMenus from './ProfileMenus';\nimport UserCharacters from './UserCharacters';\nimport { useUser } from '../../hooks/authHooks/useUser';\n\nconst UserProfile = () => {\n  const { user } = useUser();\n  return (\n    <UserProfileImgWrapper>\n      <UserProfileAvatar src={user?.profileImgPath} variant={'circular'} alt={'프로필 이미지'} />\n      <UserNicknameAndEmailWrapper>\n        <UserNicknameWrapper>\n          <Typography component={'strong'} fontFamily={'Core Sans'} fontSize={'1.2rem'} fontWeight={'bold'}>\n            {user?.nickname}\n          </Typography>\n          <Typography component={'span'} fontSize={'1rem'} fontFamily={'Core Sans'} color={'gray'}>\n            ({user?.userId})\n          </Typography>\n        </UserNicknameWrapper>\n        <UserEmailAndAdventuerNameWrapper>\n          {!user?.adventureName && (\n            <Typography\n              component={'span'}\n              fontWeight={'bold'}\n              fontFamily={'Core Sans'}\n              fontSize={'1rem'}\n              color={'gray'}\n            >\n              모험단 등록 안됨\n            </Typography>\n          )}\n        </UserEmailAndAdventuerNameWrapper>\n      </UserNicknameAndEmailWrapper>\n    </UserProfileImgWrapper>\n  );\n};\n\nconst UserProfileCard = (props: { refresh: () => void }) => {\n  return (\n    <UserProfileCardStyled>\n      <Typography\n        component={'h1'}\n        fontFamily={'Core Sans'}\n        fontSize={'1.5rem'}\n        fontWeight={'bold'}\n        sx={{ textAlign: 'left' }}\n      >\n        마이페이지\n      </Typography>\n      <Divider flexItem sx={{ width: '100%', marginTop: '10px', marginBottom: '10px' }} />\n      <UserProfile />\n      <Divider flexItem sx={{ width: '100%', marginTop: '10px' }} />\n      <ProfileMenus refresh={props.refresh} />\n    </UserProfileCardStyled>\n  );\n};\n\nconst MyPage = () => {\n  const { user } = useUser();\n  const [myPageResponse, setMyPageResponse] = useState<MyPageResponse>({} as MyPageResponse);\n  const handleSetMyPageResponse = useCallback((response: MyPageResponse) => {\n    setMyPageResponse(response);\n  }, []);\n  const handleGetMyPageResponse = useCallback(() => {\n    if (user) {\n      getMyPageResponse().then((response) => {\n        handleSetMyPageResponse(response.data);\n      });\n    }\n  }, [user, handleSetMyPageResponse]);\n  useEffect(() => {\n    handleGetMyPageResponse();\n  }, []);\n  return (\n    <Container maxWidth={'md'}>\n      {!user && <BadRequest />}\n      {user && (\n        <Box>\n          <UserProfileCard refresh={handleGetMyPageResponse} />\n          <Box sx={{ marginTop: '20px' }}>\n            <Typography\n              component={'h1'}\n              color={'#565360'}\n              fontFamily={'Core Sans'}\n              fontSize={'1.5rem'}\n              fontWeight={'bold'}\n              sx={{\n                textAlign: 'left',\n                marginBottom: '10px',\n              }}\n            >\n              내 캐릭터{' '}\n            </Typography>\n            {myPageResponse?.userDetail?.characters.length > 0 && (\n              <UserCharacters data={myPageResponse.userDetail.characters} refresh={handleGetMyPageResponse} />\n            )}\n          </Box>\n        </Box>\n      )}\n    </Container>\n  );\n};\n\nconst UserProfileCardStyled = styled(Card)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  background-color: #fff;\n  padding: 20px;\n  margin-top: 20px;\n`;\nconst UserProfileAvatar = styled(Avatar)`\n  && {\n    width: 50px;\n    height: 50px;\n    border: 2px solid black;\n    margin-right: 10px;\n  }\n`;\n\nconst UserProfileImgWrapper = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\n\nconst UserNicknameAndEmailWrapper = styled(Box)`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  width: 100%;\n  height: 100%;\n`;\n\nconst UserNicknameWrapper = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  gap: 10px;\n`;\n\nconst UserEmailAndAdventuerNameWrapper = styled(Box)`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  gap: 10px;\n`;\nexport default MyPage;\n","/Users/brinc/WebstormProjects/df-off-project/src/react-app-env.d.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/redux/index.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/redux/store.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/reportWebVitals.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/service/authService.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/setupTests.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/storage/userLocalStorage.ts",[],[],"/Users/brinc/WebstormProjects/df-off-project/src/utils/Portal.tsx",["691"],[],"import ReactDOM from 'react-dom';\n\nconst ModalPortal = (props: { children: React.ReactNode }) => {\n  const el = document.getElementById('modal') as HTMLElement;\n  return ReactDOM.createPortal(props.children, el);\n};\n\nexport default ModalPortal;\n","/Users/brinc/WebstormProjects/df-off-project/tailwind.config.js",[],[],{"ruleId":"692","severity":1,"message":"693","line":13,"column":5,"nodeType":"694","messageId":"695","endLine":27,"endColumn":6},{"ruleId":"696","severity":2,"message":"697","line":10,"column":13,"nodeType":"698","messageId":"699","endLine":10,"endColumn":31,"suppressions":"700"},{"ruleId":"701","severity":2,"message":"702","line":5,"column":3,"nodeType":"703","messageId":"704","endLine":9,"endColumn":4,"suppressions":"705"},{"ruleId":"706","severity":2,"message":"707","line":4,"column":24,"nodeType":"708","messageId":"709","endLine":4,"endColumn":38},{"ruleId":"710","severity":1,"message":"707","line":4,"column":24,"nodeType":"708","messageId":"709","endLine":4,"endColumn":38},{"ruleId":"711","severity":1,"message":"712","line":16,"column":6,"nodeType":"713","endLine":16,"endColumn":8,"suggestions":"714"},{"ruleId":"711","severity":1,"message":"715","line":158,"column":6,"nodeType":"713","endLine":158,"endColumn":56,"suggestions":"716"},{"ruleId":"711","severity":1,"message":"717","line":169,"column":6,"nodeType":"713","endLine":169,"endColumn":16,"suggestions":"718"},{"ruleId":"711","severity":1,"message":"719","line":68,"column":6,"nodeType":"713","endLine":68,"endColumn":35,"suggestions":"720"},{"ruleId":"711","severity":1,"message":"721","line":68,"column":7,"nodeType":"722","endLine":68,"endColumn":34},{"ruleId":"696","severity":2,"message":"723","line":3,"column":16,"nodeType":"724","messageId":"699","endLine":3,"endColumn":18,"suppressions":"725"},{"ruleId":"696","severity":2,"message":"723","line":46,"column":14,"nodeType":"724","messageId":"699","endLine":46,"endColumn":16,"suppressions":"726"},{"ruleId":"711","severity":1,"message":"727","line":35,"column":5,"nodeType":"713","endLine":35,"endColumn":18,"suggestions":"728"},{"ruleId":"696","severity":2,"message":"697","line":42,"column":49,"nodeType":"698","messageId":"699","endLine":42,"endColumn":67},{"ruleId":"729","severity":1,"message":"730","line":240,"column":59,"nodeType":"731","messageId":"732","endLine":240,"endColumn":61},{"ruleId":"711","severity":1,"message":"733","line":283,"column":6,"nodeType":"713","endLine":283,"endColumn":8,"suggestions":"734"},{"ruleId":"711","severity":1,"message":"735","line":342,"column":6,"nodeType":"713","endLine":342,"endColumn":19,"suggestions":"736"},{"ruleId":"711","severity":1,"message":"737","line":354,"column":6,"nodeType":"713","endLine":354,"endColumn":19,"suggestions":"738"},{"ruleId":"729","severity":1,"message":"739","line":779,"column":44,"nodeType":"731","messageId":"740","endLine":779,"endColumn":46},{"ruleId":"711","severity":1,"message":"741","line":798,"column":6,"nodeType":"713","endLine":798,"endColumn":15,"suggestions":"742"},{"ruleId":"711","severity":1,"message":"743","line":817,"column":5,"nodeType":"713","endLine":817,"endColumn":14,"suggestions":"744"},{"ruleId":"711","severity":1,"message":"745","line":853,"column":6,"nodeType":"713","endLine":853,"endColumn":8,"suggestions":"746"},{"ruleId":"706","severity":2,"message":"747","line":772,"column":10,"nodeType":"708","messageId":"709","endLine":772,"endColumn":24,"suppressions":"748"},{"ruleId":"710","severity":1,"message":"747","line":772,"column":10,"nodeType":"708","messageId":"709","endLine":772,"endColumn":24,"suppressions":"749"},{"ruleId":"711","severity":1,"message":"750","line":351,"column":6,"nodeType":"713","endLine":351,"endColumn":8,"suggestions":"751"},{"ruleId":"711","severity":1,"message":"752","line":412,"column":6,"nodeType":"713","endLine":412,"endColumn":8,"suggestions":"753"},{"ruleId":"706","severity":2,"message":"754","line":260,"column":10,"nodeType":"708","messageId":"709","endLine":260,"endColumn":17,"suppressions":"755"},{"ruleId":"710","severity":1,"message":"754","line":260,"column":10,"nodeType":"708","messageId":"709","endLine":260,"endColumn":17,"suppressions":"756"},{"ruleId":"706","severity":2,"message":"757","line":270,"column":10,"nodeType":"708","messageId":"709","endLine":270,"endColumn":18,"suppressions":"758"},{"ruleId":"710","severity":1,"message":"757","line":270,"column":10,"nodeType":"708","messageId":"709","endLine":270,"endColumn":18,"suppressions":"759"},{"ruleId":"711","severity":1,"message":"760","line":476,"column":5,"nodeType":"713","endLine":476,"endColumn":42,"suggestions":"761"},{"ruleId":"762","severity":1,"message":"763","line":238,"column":13,"nodeType":"764","endLine":243,"endColumn":15},{"ruleId":"762","severity":1,"message":"763","line":246,"column":13,"nodeType":"764","endLine":251,"endColumn":15},{"ruleId":"762","severity":1,"message":"763","line":415,"column":11,"nodeType":"764","endLine":420,"endColumn":13},{"ruleId":"762","severity":1,"message":"763","line":423,"column":11,"nodeType":"764","endLine":428,"endColumn":13},{"ruleId":"711","severity":1,"message":"765","line":595,"column":6,"nodeType":"713","endLine":595,"endColumn":29,"suggestions":"766"},{"ruleId":"711","severity":1,"message":"767","line":606,"column":6,"nodeType":"713","endLine":606,"endColumn":29,"suggestions":"768"},{"ruleId":"711","severity":1,"message":"765","line":126,"column":6,"nodeType":"713","endLine":126,"endColumn":37,"suggestions":"769"},{"ruleId":"706","severity":2,"message":"770","line":14,"column":7,"nodeType":"708","messageId":"709","endLine":14,"endColumn":28,"suppressions":"771"},{"ruleId":"710","severity":1,"message":"770","line":14,"column":7,"nodeType":"708","messageId":"709","endLine":14,"endColumn":28,"suppressions":"772"},{"ruleId":"711","severity":1,"message":"773","line":238,"column":6,"nodeType":"713","endLine":238,"endColumn":18,"suggestions":"774"},{"ruleId":"711","severity":1,"message":"775","line":178,"column":6,"nodeType":"713","endLine":178,"endColumn":18,"suggestions":"776"},{"ruleId":"711","severity":1,"message":"777","line":79,"column":6,"nodeType":"713","endLine":79,"endColumn":8,"suggestions":"778"},{"ruleId":"779","severity":1,"message":"780","line":184,"column":104,"nodeType":"781","messageId":"782","endLine":186,"endColumn":7},{"ruleId":"711","severity":1,"message":"783","line":332,"column":5,"nodeType":"713","endLine":332,"endColumn":13,"suggestions":"784"},{"ruleId":"711","severity":1,"message":"721","line":56,"column":7,"nodeType":"722","endLine":56,"endColumn":24,"suppressions":"785"},{"ruleId":"711","severity":1,"message":"786","line":79,"column":6,"nodeType":"713","endLine":79,"endColumn":8,"suggestions":"787"},{"ruleId":"788","severity":2,"message":"789","line":3,"column":41,"nodeType":"708","messageId":"790","endLine":3,"endColumn":46},"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected",["791"],"no-useless-catch","Unnecessary try/catch wrapper.","TryStatement","unnecessaryCatch",["792"],"no-unused-vars","'ListItemButton' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","ArrayExpression",["793"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. Outer scope values like 'setLoginModalOpened' aren't valid dependencies because mutating them doesn't re-render the component.",["794"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["795"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["796"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","Unexpected empty array pattern.","ArrayPattern",["797"],["798"],"React Hook useCallback has an unnecessary dependency: 'type'. Either exclude it or remove the dependency array.",["799"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'handleGetChildrenComment'. Either include it or remove the dependency array.",["800"],"React Hook useCallback has a missing dependency: 'handleGetChildrenComment'. Either include it or remove the dependency array.",["801"],"React Hook useCallback has missing dependencies: 'props.boardId' and 'props.comment.id'. Either include them or remove the dependency array.",["802"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has missing dependencies: 'boardType', 'handleGetBoardComment', and 'handleGetBoardDetail'. Either include them or remove the dependency array.",["803"],"React Hook useCallback has missing dependencies: 'dispatch' and 'handleSetBoardLike'. Either include them or remove the dependency array.",["804"],"React Hook useCallback has a missing dependency: 'handleSetBestComment'. Either include it or remove the dependency array.",["805"],"'isCommentError' is assigned a value but never used.",["806"],["807"],"React Hook useCallback has a missing dependency: 'setValue'. Either include it or remove the dependency array.",["808"],"React Hook useEffect has missing dependencies: 'boardId', 'dispatch', 'handleAddBoardFile', 'handleEditorChange', 'handleSetBoardForm', 'navigate', 'type', and 'user'. Either include them or remove the dependency array.",["809"],"'content' is assigned a value but never used.",["810"],["811"],"'serverId' is assigned a value but never used.",["812"],["813"],"React Hook useCallback has a missing dependency: 'hashtagContentStyle'. Either include it or remove the dependency array.",["814"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["815"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["816"],["817"],"'SocialRegisterButtons' is assigned a value but never used.",["818"],["819"],"React Hook useEffect has a missing dependency: 'props.url'. Either include it or remove the dependency array.",["820"],"React Hook useEffect has missing dependencies: 'props.url', 'setData', 'setIsError', and 'setIsLoading'. Either include them or remove the dependency array.",["821"],"React Hook useCallback has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["822"],"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","putCommentInBraces","React Hook useCallback has an unnecessary dependency: 'sortBy'. Either exclude it or remove the dependency array.",["823"],["824"],"React Hook useEffect has a missing dependency: 'handleGetMyPageResponse'. Either include it or remove the dependency array.",["825"],"no-undef","'React' is not defined.","undef",{"kind":"826","justification":"827"},{"kind":"826","justification":"827"},{"desc":"828","fix":"829"},{"desc":"830","fix":"831"},{"desc":"832","fix":"833"},{"desc":"834","fix":"835"},{"kind":"826","justification":"827"},{"kind":"826","justification":"827"},{"desc":"836","fix":"837"},{"desc":"838","fix":"839"},{"desc":"840","fix":"841"},{"desc":"842","fix":"843"},{"desc":"844","fix":"845"},{"desc":"846","fix":"847"},{"desc":"848","fix":"849"},{"kind":"826","justification":"827"},{"kind":"826","justification":"827"},{"desc":"850","fix":"851"},{"desc":"852","fix":"853"},{"kind":"826","justification":"827"},{"kind":"826","justification":"827"},{"kind":"826","justification":"827"},{"kind":"826","justification":"827"},{"desc":"854","fix":"855"},{"desc":"856","fix":"857"},{"desc":"856","fix":"858"},{"desc":"859","fix":"860"},{"kind":"826","justification":"827"},{"kind":"826","justification":"827"},{"desc":"861","fix":"862"},{"desc":"863","fix":"864"},{"desc":"865","fix":"866"},{"desc":"867","fix":"868"},{"kind":"826","justification":"827"},{"desc":"869","fix":"870"},"directive","","Update the dependencies array to be: [user]",{"range":"871","text":"872"},"Update the dependencies array to be: [dispatch, props]",{"range":"873","text":"874"},"Update the dependencies array to be: [navigate, props]",{"range":"875","text":"876"},"Update the dependencies array to be: [props]",{"range":"877","text":"878"},"Update the dependencies array to be: [regex]",{"range":"879","text":"880"},"Update the dependencies array to be: [handleGetChildrenComment]",{"range":"881","text":"882"},"Update the dependencies array to be: [handleGetChildrenComment, isReplyOpen]",{"range":"883","text":"884"},"Update the dependencies array to be: [props.boardId, props.comment.id]",{"range":"885","text":"886"},"Update the dependencies array to be: [boardId, boardType, handleGetBoardComment, handleGetBoardDetail]",{"range":"887","text":"888"},"Update the dependencies array to be: [dispatch, handleSetBoardLike]",{"range":"889","text":"890"},"Update the dependencies array to be: [handleSetBestComment]",{"range":"891","text":"892"},"Update the dependencies array to be: [setValue]",{"range":"893","text":"894"},"Update the dependencies array to be: [boardId, dispatch, handleAddBoardFile, handleEditorChange, handleSetBoardForm, navigate, type, user]",{"range":"895","text":"896"},"Update the dependencies array to be: [hashtagContentStyle, hashtagCountArray, isHashtagLoading]",{"range":"897","text":"898"},"Update the dependencies array to be: [characterId, dispatch, serverId]",{"range":"899","text":"900"},{"range":"901","text":"900"},"Update the dependencies array to be: [characterName, serverId, page, dispatch]",{"range":"902","text":"903"},"Update the dependencies array to be: [isSelected, props.url]",{"range":"904","text":"905"},"Update the dependencies array to be: [isSelected, props.url, setData, setIsError, setIsLoading]",{"range":"906","text":"907"},"Update the dependencies array to be: [navigate]",{"range":"908","text":"909"},"Update the dependencies array to be: []",{"range":"910","text":"911"},"Update the dependencies array to be: [handleGetMyPageResponse]",{"range":"912","text":"913"},[589,591],"[user]",[3491,3541],"[dispatch, props]",[3947,3957],"[navigate, props]",[1962,1991],"[props]",[1015,1028],"[regex]",[7765,7767],"[handleGetChildrenComment]",[9371,9384],"[handleGetChildrenComment, isReplyOpen]",[9704,9717],"[props.boardId, props.comment.id]",[23979,23988],"[boardId, boardType, handleGetBoardComment, handleGetBoardDetail]",[24618,24627],"[dispatch, handleSetBoardLike]",[25614,25616],"[handleSetBestComment]",[10810,10812],"[setValue]",[12494,12496],"[boardId, dispatch, handleAddBoardFile, handleEditorChange, handleSetBoardForm, navigate, type, user]",[12080,12117],"[hashtagContentStyle, hashtagCountArray, isHashtagLoading]",[18136,18159],"[characterId, dispatch, serverId]",[18477,18500],[3372,3403],"[characterName, serverId, page, dispatch]",[6443,6455],"[isSelected, props.url]",[5012,5024],"[isSelected, props.url, setData, setIsError, setIsLoading]",[1980,1982],"[navigate]",[9357,9365],"[]",[2768,2770],"[handleGetMyPageResponse]"]